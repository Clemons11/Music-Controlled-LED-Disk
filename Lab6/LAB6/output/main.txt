; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --library_type=standardlib -odebug\main.o --asm_dir=.\output\ --list_dir=.\output\ --depend=debug\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,66,1296,186 -I.\SRC\eGFX -I.\SRC\eGFX\Drivers -I.\SRC\eGFX\Fonts -I.\SRC\Board -I.\SRC\System\CMSIS\Include -I.\SRC\System\utilities -I.\SRC\Drivers -I.\SRC\System -I.\SRC\eGFX\Fonts\OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP -I.\SRC\Audio -I.\SRC\eGFX\Sprites -I.\SRC\eGFX\Fonts\Consolas__26px__Regular__AntiAliasGridFit_1BPP -I.\SRC\eGFX\Fonts\Magneto__26px__Regular__AntiAliasGridFit_16BPP_565 -I"C:\Users\Matt\Documents\PSUEE\EE 403W\Lab6\LAB6\RTE\_Lab6" -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\brd_eval54607\inc -IC:\Keil_v5\ARM\PACK\Keil\LPC54000_DFP\2.2.0\LPCOpen\lpc5460x\chip_5460x\inc -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=522 -D_RTE_ -DCHIP_LPC5460X -DDEBUG -DCPU_LPC54608 -DCPU_LPC54608J512ET180=1 -DARM_MATH_CM4 -D__FPU_PRESENT -DCORE_M4 --omf_browse=debug\main.crf SRC\main.c]
                          THUMB

                          AREA ||i.CLOCK_EnableClock||, CODE, READONLY, ALIGN=2

                  CLOCK_EnableClock PROC
;;;705    
;;;706    static inline void CLOCK_EnableClock(clock_ip_name_t clk)
000000  0a01              LSRS     r1,r0,#8
;;;707    {
;;;708        uint32_t index = CLK_GATE_ABSTRACT_REG_OFFSET(clk);
;;;709        if (index < 3)
000002  2903              CMP      r1,#3
000004  d205              BCS      |L1.18|
;;;710        {
;;;711            SYSCON->AHBCLKCTRLSET[index] = (1U << CLK_GATE_ABSTRACT_BITS_SHIFT(clk));
000006  2201              MOVS     r2,#1
000008  4082              LSLS     r2,r2,r0
00000a  4b05              LDR      r3,|L1.32|
00000c  f8432021          STR      r2,[r3,r1,LSL #2]
000010  e005              B        |L1.30|
                  |L1.18|
;;;712        }
;;;713        else
;;;714        {
;;;715            SYSCON->ASYNCAPBCTRL = SYSCON_ASYNCAPBCTRL_ENABLE(1);
000012  2201              MOVS     r2,#1
000014  0793              LSLS     r3,r2,#30
000016  64da              STR      r2,[r3,#0x4c]
;;;716            ASYNC_SYSCON->ASYNCAPBCLKCTRLSET = (1U << CLK_GATE_ABSTRACT_BITS_SHIFT(clk));
000018  4082              LSLS     r2,r2,r0
00001a  4b02              LDR      r3,|L1.36|
00001c  615a              STR      r2,[r3,#0x14]
                  |L1.30|
;;;717        }
;;;718    }
00001e  4770              BX       lr
;;;719    
                          ENDP

                  |L1.32|
                          DCD      0x40000220
                  |L1.36|
                          DCD      0x40040000

                          AREA ||i.EMC_MirrorChipAddr||, CODE, READONLY, ALIGN=1

                  EMC_MirrorChipAddr PROC
;;;300     */
;;;301    static void EMC_MirrorChipAddr(EMC_Type *base, bool enable)
000000  b121              CBZ      r1,|L2.12|
;;;302    {
;;;303        if (enable) 
;;;304        {
;;;305            base->CONTROL |= EMC_CONTROL_M_MASK;
000002  6802              LDR      r2,[r0,#0]
000004  f0420202          ORR      r2,r2,#2
000008  6002              STR      r2,[r0,#0]
00000a  e003              B        |L2.20|
                  |L2.12|
;;;306        }
;;;307        else 
;;;308        {
;;;309            base->CONTROL &= ~EMC_CONTROL_M_MASK;
00000c  6802              LDR      r2,[r0,#0]
00000e  f0220202          BIC      r2,r2,#2
000012  6002              STR      r2,[r0,#0]
                  |L2.20|
;;;310        }
;;;311    }
000014  4770              BX       lr
;;;312    
                          ENDP


                          AREA ||i.FLEXCOMM6_DriverIRQHandler||, CODE, READONLY, ALIGN=2

                  FLEXCOMM6_DriverIRQHandler PROC
;;;356     
;;;357    void FLEXCOMM6_DriverIRQHandler(void)
000000  4807              LDR      r0,|L3.32|
;;;358    {
;;;359        if (I2S0->FIFOINTSTAT & I2S_FIFOINTSTAT_TXLVL_MASK)
000002  6800              LDR      r0,[r0,#0]
000004  f0000004          AND      r0,r0,#4
000008  b140              CBZ      r0,|L3.28|
;;;360        {
;;;361            /*
;;;362    					NextSampleOut Holds the last value from the I2S RX Interrupt.
;;;363    				  It is also ready in the "packed" FIFO format
;;;364    			  */
;;;365    				I2S0->FIFOWR = NextSampleOut;
00000a  4806              LDR      r0,|L3.36|
00000c  6800              LDR      r0,[r0,#0]  ; NextSampleOut
00000e  4904              LDR      r1,|L3.32|
000010  3108              ADDS     r1,r1,#8
000012  6008              STR      r0,[r1,#0]
;;;366    		
;;;367    				 /* Clear TX level interrupt flag */
;;;368            I2S0->FIFOSTAT = I2S_FIFOSTAT_TXLVL(1U);
000014  1588              ASRS     r0,r1,#22
000016  4902              LDR      r1,|L3.32|
000018  3914              SUBS     r1,r1,#0x14
00001a  6008              STR      r0,[r1,#0]
                  |L3.28|
;;;369    		}
;;;370    }
00001c  4770              BX       lr
;;;371    
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      0x40097e18
                  |L3.36|
                          DCD      NextSampleOut

                          AREA ||i.FLEXCOMM7_DriverIRQHandler||, CODE, READONLY, ALIGN=2

                  FLEXCOMM7_DriverIRQHandler PROC
;;;371    
;;;372    void FLEXCOMM7_DriverIRQHandler(void)
000000  b508              PUSH     {r3,lr}
;;;373    {
;;;374    		register float LeftChannel;
;;;375    		register float RightChannel;
;;;376    	  I2S_FIFO_Data_t FIFO_Data; 
;;;377    	
;;;378         /* Clear RX level interrupt flag */
;;;379         I2S1->FIFOSTAT = I2S_FIFOSTAT_RXLVL(1U);
000002  f44f3080          MOV      r0,#0x10000
000006  4934              LDR      r1,|L4.216|
000008  6008              STR      r0,[r1,#0]
;;;380    	
;;;381    	   /*
;;;382    				Read the Recieve FIFO.   Data is packed as two samples in one 32-bit word.  We will immediately store the data
;;;383    				in a variable that is used is the transmit routine to send incoming data back out.
;;;384    		 */
;;;385    	    FIFO_Data.Data = I2S1->FIFORD;
00000a  4833              LDR      r0,|L4.216|
00000c  302c              ADDS     r0,r0,#0x2c
00000e  6800              LDR      r0,[r0,#0]
000010  9000              STR      r0,[sp,#0]
;;;386    	    NextSampleOut = FIFO_Data.Data; //dump the data back out!
000012  4932              LDR      r1,|L4.220|
000014  9800              LDR      r0,[sp,#0]
000016  6008              STR      r0,[r1,#0]  ; NextSampleOut
;;;387    	   
;;;388    	   LeftChannel = (float)(FIFO_Data.Channel[0])/32768.0f;
000018  f9bd0000          LDRSH    r0,[sp,#0]
00001c  ee010a10          VMOV     s2,r0
000020  eeb81ac1          VCVT.F32.S32 s2,s2
000024  eddf1a2e          VLDR     s3,|L4.224|
000028  ee812a21          VDIV.F32 s4,s2,s3
00002c  eeb00a42          VMOV.F32 s0,s4
;;;389    	   RightChannel = (float)(FIFO_Data.Channel[1])/32768.0f;
000030  f9bd0002          LDRSH    r0,[sp,#2]
000034  ee010a10          VMOV     s2,r0
000038  eeb81ac1          VCVT.F32.S32 s2,s2
00003c  eddf1a28          VLDR     s3,|L4.224|
000040  ee812a21          VDIV.F32 s4,s2,s3
000044  eef00a42          VMOV.F32 s1,s4
;;;390    		 
;;;391    		 BackgroundLeftBuffer[BackgroundBufferIdx] = LeftChannel;
000048  4826              LDR      r0,|L4.228|
00004a  6800              LDR      r0,[r0,#0]  ; BackgroundLeftBuffer
00004c  4926              LDR      r1,|L4.232|
00004e  6809              LDR      r1,[r1,#0]  ; BackgroundBufferIdx
000050  eb000081          ADD      r0,r0,r1,LSL #2
000054  ed800a00          VSTR     s0,[r0,#0]
;;;392    		 BackgroundRightBuffer[BackgroundBufferIdx] = RightChannel;
000058  4824              LDR      r0,|L4.236|
00005a  6800              LDR      r0,[r0,#0]  ; BackgroundRightBuffer
00005c  4922              LDR      r1,|L4.232|
00005e  6809              LDR      r1,[r1,#0]  ; BackgroundBufferIdx
000060  eb000081          ADD      r0,r0,r1,LSL #2
000064  edc00a00          VSTR     s1,[r0,#0]
;;;393    		 
;;;394    		BackgroundBufferIdx++;
000068  481f              LDR      r0,|L4.232|
00006a  6800              LDR      r0,[r0,#0]  ; BackgroundBufferIdx
00006c  1c40              ADDS     r0,r0,#1
00006e  491e              LDR      r1,|L4.232|
000070  6008              STR      r0,[r1,#0]  ; BackgroundBufferIdx
;;;395    
;;;396    
;;;397    if(BackgroundBufferIdx == BUFFER_SIZE)
000072  4608              MOV      r0,r1
000074  6800              LDR      r0,[r0,#0]  ; BackgroundBufferIdx
000076  f5b07f80          CMP      r0,#0x100
00007a  d12c              BNE      |L4.214|
;;;398    		{
;;;399    		
;;;400    			if(BackgroundRightBuffer == RightBuffer1)
00007c  481b              LDR      r0,|L4.236|
00007e  6800              LDR      r0,[r0,#0]  ; BackgroundRightBuffer
000080  491b              LDR      r1,|L4.240|
000082  4288              CMP      r0,r1
000084  d106              BNE      |L4.148|
;;;401    				{
;;;402    					BackgroundRightBuffer = RightBuffer2;
000086  481b              LDR      r0,|L4.244|
000088  4918              LDR      r1,|L4.236|
00008a  6008              STR      r0,[r1,#0]  ; BackgroundRightBuffer
;;;403    					RightBuffer = RightBuffer1;
00008c  4818              LDR      r0,|L4.240|
00008e  491a              LDR      r1,|L4.248|
000090  6008              STR      r0,[r1,#0]  ; RightBuffer
000092  e005              B        |L4.160|
                  |L4.148|
;;;404    				}
;;;405    				else
;;;406    				{
;;;407    					BackgroundRightBuffer = RightBuffer1;
000094  4816              LDR      r0,|L4.240|
000096  4915              LDR      r1,|L4.236|
000098  6008              STR      r0,[r1,#0]  ; BackgroundRightBuffer
;;;408    					RightBuffer = RightBuffer2;
00009a  4816              LDR      r0,|L4.244|
00009c  4916              LDR      r1,|L4.248|
00009e  6008              STR      r0,[r1,#0]  ; RightBuffer
                  |L4.160|
;;;409    				}	
;;;410    				
;;;411    				if(BackgroundLeftBuffer == LeftBuffer1)
0000a0  4810              LDR      r0,|L4.228|
0000a2  6800              LDR      r0,[r0,#0]  ; BackgroundLeftBuffer
0000a4  4915              LDR      r1,|L4.252|
0000a6  4288              CMP      r0,r1
0000a8  d106              BNE      |L4.184|
;;;412    				{
;;;413    					BackgroundLeftBuffer = LeftBuffer2;
0000aa  4815              LDR      r0,|L4.256|
0000ac  490d              LDR      r1,|L4.228|
0000ae  6008              STR      r0,[r1,#0]  ; BackgroundLeftBuffer
;;;414    					LeftBuffer = LeftBuffer1;
0000b0  4812              LDR      r0,|L4.252|
0000b2  4914              LDR      r1,|L4.260|
0000b4  6008              STR      r0,[r1,#0]  ; LeftBuffer
0000b6  e005              B        |L4.196|
                  |L4.184|
;;;415    				}
;;;416    				else
;;;417    				{
;;;418    					BackgroundLeftBuffer = LeftBuffer1;
0000b8  4810              LDR      r0,|L4.252|
0000ba  490a              LDR      r1,|L4.228|
0000bc  6008              STR      r0,[r1,#0]  ; BackgroundLeftBuffer
;;;419    					LeftBuffer = LeftBuffer2;
0000be  4810              LDR      r0,|L4.256|
0000c0  4910              LDR      r1,|L4.260|
0000c2  6008              STR      r0,[r1,#0]  ; LeftBuffer
                  |L4.196|
;;;420    				}
;;;421    
;;;422    				/*Set a flag to inidicate that the buffer is ready!*/
;;;423    				if(NextBufferReady == 0)
0000c4  4810              LDR      r0,|L4.264|
0000c6  6800              LDR      r0,[r0,#0]  ; NextBufferReady
0000c8  b910              CBNZ     r0,|L4.208|
;;;424    					NextBufferReady = 1;
0000ca  2001              MOVS     r0,#1
0000cc  490e              LDR      r1,|L4.264|
0000ce  6008              STR      r0,[r1,#0]  ; NextBufferReady
                  |L4.208|
;;;425    				
;;;426    				
;;;427    				
;;;428    				/*Reset our index that will fill up the background buffer*/
;;;429    	  		BackgroundBufferIdx=0;
0000d0  2000              MOVS     r0,#0
0000d2  4905              LDR      r1,|L4.232|
0000d4  6008              STR      r0,[r1,#0]  ; BackgroundBufferIdx
                  |L4.214|
;;;430    				
;;;431    			}	
;;;432    
;;;433    }
0000d6  bd08              POP      {r3,pc}
;;;434    
                          ENDP

                  |L4.216|
                          DCD      0x40098e04
                  |L4.220|
                          DCD      NextSampleOut
                  |L4.224|
0000e0  47000000          DCFS     0x47000000 ; 32768
                  |L4.228|
                          DCD      BackgroundLeftBuffer
                  |L4.232|
                          DCD      BackgroundBufferIdx
                  |L4.236|
                          DCD      BackgroundRightBuffer
                  |L4.240|
                          DCD      RightBuffer1
                  |L4.244|
                          DCD      RightBuffer2
                  |L4.248|
                          DCD      RightBuffer
                  |L4.252|
                          DCD      LeftBuffer1
                  |L4.256|
                          DCD      LeftBuffer2
                  |L4.260|
                          DCD      LeftBuffer
                  |L4.264|
                          DCD      NextBufferReady

                          AREA ||i.InitMicBuffers||, CODE, READONLY, ALIGN=2

                  InitMicBuffers PROC
;;;434    
;;;435    void InitMicBuffers()
000000  2000              MOVS     r0,#0
;;;436    {
;;;437    	for (int i=0;i<BUFFER_SIZE;i++)
000002  e01c              B        |L5.62|
                  |L5.4|
;;;438    	{
;;;439    		LeftBuffer1[i] = 0;
000004  ed9f0a17          VLDR     s0,|L5.100|
000008  4917              LDR      r1,|L5.104|
00000a  eb010180          ADD      r1,r1,r0,LSL #2
00000e  ed810a00          VSTR     s0,[r1,#0]
;;;440    		LeftBuffer2[i] = 0;
000012  ed9f0a14          VLDR     s0,|L5.100|
000016  4915              LDR      r1,|L5.108|
000018  eb010180          ADD      r1,r1,r0,LSL #2
00001c  ed810a00          VSTR     s0,[r1,#0]
;;;441    		RightBuffer1[i] = 0;
000020  ed9f0a10          VLDR     s0,|L5.100|
000024  4912              LDR      r1,|L5.112|
000026  eb010180          ADD      r1,r1,r0,LSL #2
00002a  ed810a00          VSTR     s0,[r1,#0]
;;;442    		RightBuffer2[i] = 0;
00002e  ed9f0a0d          VLDR     s0,|L5.100|
000032  4910              LDR      r1,|L5.116|
000034  eb010180          ADD      r1,r1,r0,LSL #2
000038  ed810a00          VSTR     s0,[r1,#0]
00003c  1c40              ADDS     r0,r0,#1              ;437
                  |L5.62|
00003e  28ff              CMP      r0,#0xff              ;437
000040  dde0              BLE      |L5.4|
;;;443    	}
;;;444    
;;;445    	LeftBuffer = LeftBuffer1;
000042  4809              LDR      r0,|L5.104|
000044  490c              LDR      r1,|L5.120|
000046  6008              STR      r0,[r1,#0]  ; LeftBuffer
;;;446    	RightBuffer = RightBuffer1;
000048  4809              LDR      r0,|L5.112|
00004a  490c              LDR      r1,|L5.124|
00004c  6008              STR      r0,[r1,#0]  ; RightBuffer
;;;447    
;;;448    	BackgroundLeftBuffer = LeftBuffer2;
00004e  4807              LDR      r0,|L5.108|
000050  490b              LDR      r1,|L5.128|
000052  6008              STR      r0,[r1,#0]  ; BackgroundLeftBuffer
;;;449    	BackgroundRightBuffer = RightBuffer2;
000054  4807              LDR      r0,|L5.116|
000056  490b              LDR      r1,|L5.132|
000058  6008              STR      r0,[r1,#0]  ; BackgroundRightBuffer
;;;450    
;;;451    	NextBufferReady = 0;
00005a  2000              MOVS     r0,#0
00005c  490a              LDR      r1,|L5.136|
00005e  6008              STR      r0,[r1,#0]  ; NextBufferReady
;;;452    }
000060  4770              BX       lr
;;;453    
                          ENDP

000062  0000              DCW      0x0000
                  |L5.100|
000064  00000000          DCFS     0x00000000 ; 0
                  |L5.104|
                          DCD      LeftBuffer1
                  |L5.108|
                          DCD      LeftBuffer2
                  |L5.112|
                          DCD      RightBuffer1
                  |L5.116|
                          DCD      RightBuffer2
                  |L5.120|
                          DCD      LeftBuffer
                  |L5.124|
                          DCD      RightBuffer
                  |L5.128|
                          DCD      BackgroundLeftBuffer
                  |L5.132|
                          DCD      BackgroundRightBuffer
                  |L5.136|
                          DCD      NextBufferReady

                          AREA ||i.Init_SPI||, CODE, READONLY, ALIGN=2

                  Init_SPI PROC
;;;159    
;;;160    void Init_SPI()
000000  f44f4100          MOV      r1,#0x8000
;;;161    {
;;;162    	
;;;163    	//If using FLEXCOMM9 you have to use SPI9, when using SPI.
;;;164    	SYSCON->AHBCLKCTRLSET[2] = SYSCON_AHBCLKCTRL_FLEXCOMM9_MASK; // setting flexcomm9 LPC54608.h, Table 54
000004  481f              LDR      r0,|L6.132|
000006  6001              STR      r1,[r0,#0]
;;;165    	//SYSCON->AHBCLKCTRLSET[2] = SYSCON_AHBCLKCTRL_GPIO4_MASK;
;;;166    	
;;;167    	SYSCON->FCLKSEL[9] = SYSCON_FCLKSEL_SEL(0); // Sets flexcomm9 clock to fro_12MHz, page 60 UM
000008  2100              MOVS     r1,#0
00000a  481e              LDR      r0,|L6.132|
00000c  30ac              ADDS     r0,r0,#0xac
00000e  6001              STR      r1,[r0,#0]
;;;168    
;;;169    // a. Reset FlexComm Interface
;;;170    	
;;;171    SYSCON-> PRESETCTRLSET[2] = SYSCON_PRESETCTRL_FC9_RST_MASK; // Using FlexComm 9 
000010  13c1              ASRS     r1,r0,#15
000012  481d              LDR      r0,|L6.136|
000014  6001              STR      r1,[r0,#0]
;;;172    SYSCON-> PRESETCTRLCLR[2] = SYSCON_PRESETCTRL_FC9_RST_MASK; // Latter comes from LPC54608.h
000016  481c              LDR      r0,|L6.136|
000018  3020              ADDS     r0,r0,#0x20
00001a  6001              STR      r1,[r0,#0]
;;;173    
;;;174    // b. Set SPI as Flexcomm interface function
;;;175    
;;;176    FLEXCOMM9-> PSELID = FLEXCOMM_PSELID_PERSEL(2); // Page 321 table 342, Must be Flexcomm0-9
00001c  2002              MOVS     r0,#2
00001e  491b              LDR      r1,|L6.140|
000020  6008              STR      r0,[r1,#0]
;;;177    
;;;178    // c. Configure SPI and FIFO's for operation
;;;179    	
;;;180    
;;;181    	SPI9->CFG |= SPI_CFG_ENABLE(0);
000022  481b              LDR      r0,|L6.144|
000024  6800              LDR      r0,[r0,#0]
000026  491a              LDR      r1,|L6.144|
000028  6008              STR      r0,[r1,#0]
;;;182    	SPI9->FIFOCFG = SPI_FIFOCFG_ENABLETX(0); //Enables Tx for FIFO, table 376 
00002a  2000              MOVS     r0,#0
00002c  4919              LDR      r1,|L6.148|
00002e  6008              STR      r0,[r1,#0]
;;;183    	SPI9->CFG = SPI_CFG_MASTER(1); //Sets SPI9 as SPI and puts in Master mode. SPI9???
000030  2004              MOVS     r0,#4
000032  4917              LDR      r1,|L6.144|
000034  6008              STR      r0,[r1,#0]
;;;184    	SPI9->FIFOCFG = SPI_FIFOCFG_ENABLETX(1);
000036  2001              MOVS     r0,#1
000038  4916              LDR      r1,|L6.148|
00003a  6008              STR      r0,[r1,#0]
;;;185    	SPI9->CFG |= SPI_CFG_ENABLE(1);
00003c  4814              LDR      r0,|L6.144|
00003e  6800              LDR      r0,[r0,#0]
000040  f0400001          ORR      r0,r0,#1
000044  4912              LDR      r1,|L6.144|
000046  6008              STR      r0,[r1,#0]
;;;186    //	SPI9->STAT |= SPI_STAT_SSD(1);
;;;187     // THIS IS NOT GETTING SET *WAS here*
;;;188    
;;;189    // d. Configure the SPI for receiving and transmitting data
;;;190    
;;;191    /* d1. Set the appropriate bit for the related Flexcomm Interface in order
;;;192     *	  to enable the clock to the register interface.
;;;193    */
;;;194    
;;;195    
;;;196    
;;;197    
;;;198    // d2. Enable or disable the related Flexcomm Interface interrupts in the NVIC?????
;;;199    
;;;200    
;;;201    // d3. Configure the required Flexcomm Interface pin functions through IOCON
;;;202    //Page 148-151 for function declaration IOCON_PIO_FUNC
;;;203    SYSCON->AHBCLKCTRL[0] |= SYSCON_AHBCLKCTRL_IOCON(1);
000048  480e              LDR      r0,|L6.132|
00004a  3828              SUBS     r0,r0,#0x28
00004c  6800              LDR      r0,[r0,#0]
00004e  f4405000          ORR      r0,r0,#0x2000
000052  0509              LSLS     r1,r1,#20
000054  f8c10200          STR      r0,[r1,#0x200]
;;;204    IOCON-> PIO[3][20] = IOCON_PIO_FUNC(1) |  IOCON_PIO_FILTEROFF(1) | IOCON_PIO_DIGIMODE(1); // SCK pin FUNC: 1 for FC9_SCK
000058  f2403101          MOV      r1,#0x301
00005c  480e              LDR      r0,|L6.152|
00005e  6001              STR      r1,[r0,#0]
;;;205    IOCON-> PIO[3][21] = IOCON_PIO_FUNC(1) |  IOCON_PIO_FILTEROFF(1) | IOCON_PIO_DIGIMODE(1); // MOSI pin FUNC: 1 for FC9_MOSI
000060  1d00              ADDS     r0,r0,#4
000062  6001              STR      r1,[r0,#0]
;;;206    //IOCON-> PIO[4][2] = IOCON_PIO_FUNC(0);//GPIO
;;;207    SYSCON->AHBCLKCTRL[0] |= SYSCON_AHBCLKCTRL_IOCON(0);//Might need to comment these out
000064  4807              LDR      r0,|L6.132|
000066  3828              SUBS     r0,r0,#0x28
000068  6800              LDR      r0,[r0,#0]
00006a  4906              LDR      r1,|L6.132|
00006c  3928              SUBS     r1,r1,#0x28
00006e  6008              STR      r0,[r1,#0]
;;;208    // e. Configure the Flexcomm Interface clock and SPI data rate
;;;209    
;;;210    //GPIO->DIR[4] = GPIO_DIR_DIRP_MASK;
;;;211    
;;;212    SPI9->DIV = SPI_DIV_DIVVAL(0); //Divides 12MHz clock by 3 for a data rate of 4MHz. SPI9????
000070  2000              MOVS     r0,#0
000072  4907              LDR      r1,|L6.144|
000074  3124              ADDS     r1,r1,#0x24
000076  6008              STR      r0,[r1,#0]
;;;213    SPI9->DLY = SPI_DLY_FRAME_DELAY(1);
000078  1588              ASRS     r0,r1,#22
00007a  4905              LDR      r1,|L6.144|
00007c  1d09              ADDS     r1,r1,#4
00007e  6008              STR      r0,[r1,#0]
;;;214     //& SPI_FIFOWR_TXDATA_MASK & Data; Sets FIFO to only transmit data and not receive, first 16 bits are TXDATA bits.
;;;215    //First 16 bits are TXDATA however we need 32 for LED frame. **Need a solution**
;;;216    //Once word is sent we want FIFOWR to be reset.
;;;217    
;;;218    }
000080  4770              BX       lr
;;;219    
                          ENDP

000082  0000              DCW      0x0000
                  |L6.132|
                          DCD      0x40000228
                  |L6.136|
                          DCD      0x40000128
                  |L6.140|
                          DCD      0x4009aff8
                  |L6.144|
                          DCD      0x4009a400
                  |L6.148|
                          DCD      0x4009ae00
                  |L6.152|
                          DCD      0x400011d0

                          AREA ||i.clearDisk||, CODE, READONLY, ALIGN=2

                  clearDisk PROC
;;;285    
;;;286    void clearDisk() // this clears the disk completely and resets all the data in array to 0;
000000  b500              PUSH     {lr}
;;;287    {
;;;288    	uint16_t i; // Has to be > 0-255 or else for loop runs forever.
;;;289    	for(int i=0;i<1023;i+=4)
000002  2000              MOVS     r0,#0
000004  e015              B        |L7.50|
                  |L7.6|
;;;290    	{
;;;291    	*(ledArray +i) = 0xE0;
000006  21e0              MOVS     r1,#0xe0
000008  4a2a              LDR      r2,|L7.180|
00000a  6812              LDR      r2,[r2,#0]  ; ledArray
00000c  f8421020          STR      r1,[r2,r0,LSL #2]
;;;292    	*(ledArray +i+1) = 0;
000010  2100              MOVS     r1,#0
000012  4a28              LDR      r2,|L7.180|
000014  6812              LDR      r2,[r2,#0]  ; ledArray
000016  eb020280          ADD      r2,r2,r0,LSL #2
00001a  6051              STR      r1,[r2,#4]
;;;293    	*(ledArray +i+2) = 0;
00001c  4a25              LDR      r2,|L7.180|
00001e  6812              LDR      r2,[r2,#0]  ; ledArray
000020  eb020280          ADD      r2,r2,r0,LSL #2
000024  6091              STR      r1,[r2,#8]
;;;294    	*(ledArray +i+3) = 0;
000026  4a23              LDR      r2,|L7.180|
000028  6812              LDR      r2,[r2,#0]  ; ledArray
00002a  eb020280          ADD      r2,r2,r0,LSL #2
00002e  60d1              STR      r1,[r2,#0xc]
000030  1d00              ADDS     r0,r0,#4              ;289
                  |L7.50|
000032  f24031ff          MOV      r1,#0x3ff             ;289
000036  4288              CMP      r0,r1                 ;289
000038  dbe5              BLT      |L7.6|
;;;295    	}
;;;296    		
;;;297    		for(i=0;i<4;i++)
00003a  2300              MOVS     r3,#0
00003c  e008              B        |L7.80|
                  |L7.62|
;;;298    	{
;;;299    	
;;;300    	SPI9->FIFOWR = SPI_FIFOWR_TXDATA(0x00)| SPI_FIFOWR_RXIGNORE(1)| SPI_FIFOWR_LEN(7); 
00003e  f04f60e8          MOV      r0,#0x7400000
000042  491d              LDR      r1,|L7.184|
000044  6008              STR      r0,[r1,#0]
;;;301     		delay(100);
000046  2064              MOVS     r0,#0x64
000048  f7fffffe          BL       delay
00004c  1c58              ADDS     r0,r3,#1              ;297
00004e  b283              UXTH     r3,r0                 ;297
                  |L7.80|
000050  2b04              CMP      r3,#4                 ;297
000052  dbf4              BLT      |L7.62|
;;;302    	}
;;;303    	for(i=0;i<=255;i++)
000054  2300              MOVS     r3,#0
000056  e01c              B        |L7.146|
                  |L7.88|
;;;304    {	
;;;305    	
;;;306    	SPI9->FIFOWR = SPI_FIFOWR_TXDATA(0xE0)| SPI_FIFOWR_RXIGNORE(1) | SPI_FIFOWR_LEN(7);
000058  4818              LDR      r0,|L7.188|
00005a  4917              LDR      r1,|L7.184|
00005c  6008              STR      r0,[r1,#0]
;;;307    	delay(100);
00005e  2064              MOVS     r0,#0x64
000060  f7fffffe          BL       delay
;;;308    	SPI9->FIFOWR = SPI_FIFOWR_TXDATA(0x00)| SPI_FIFOWR_RXIGNORE(1) | SPI_FIFOWR_LEN(7);//B
000064  f04f60e8          MOV      r0,#0x7400000
000068  4913              LDR      r1,|L7.184|
00006a  6008              STR      r0,[r1,#0]
;;;309    	delay(100);
00006c  2064              MOVS     r0,#0x64
00006e  f7fffffe          BL       delay
;;;310    	SPI9->FIFOWR = SPI_FIFOWR_TXDATA(0x00)| SPI_FIFOWR_RXIGNORE(1) | SPI_FIFOWR_LEN(7);//G
000072  f04f60e8          MOV      r0,#0x7400000
000076  4910              LDR      r1,|L7.184|
000078  6008              STR      r0,[r1,#0]
;;;311    	delay(100);
00007a  2064              MOVS     r0,#0x64
00007c  f7fffffe          BL       delay
;;;312    	SPI9->FIFOWR = SPI_FIFOWR_TXDATA(0x00)| SPI_FIFOWR_RXIGNORE(1) | SPI_FIFOWR_LEN(7) ;//R
000080  f04f60e8          MOV      r0,#0x7400000
000084  490c              LDR      r1,|L7.184|
000086  6008              STR      r0,[r1,#0]
;;;313    	delay(100);
000088  2064              MOVS     r0,#0x64
00008a  f7fffffe          BL       delay
00008e  1c58              ADDS     r0,r3,#1              ;303
000090  b283              UXTH     r3,r0                 ;303
                  |L7.146|
000092  2bff              CMP      r3,#0xff              ;303
000094  dde0              BLE      |L7.88|
;;;314    
;;;315    }	
;;;316    	
;;;317    	for(i=0;i<15;i++) //End frame needs to be as long as number of LEDs/2
000096  2300              MOVS     r3,#0
000098  e008              B        |L7.172|
                  |L7.154|
;;;318    	{
;;;319    		
;;;320        SPI9->FIFOWR = SPI_FIFOWR_TXDATA(0x00) | SPI_FIFOWR_RXIGNORE(1) | SPI_FIFOWR_LEN(7);  
00009a  f04f60e8          MOV      r0,#0x7400000
00009e  4906              LDR      r1,|L7.184|
0000a0  6008              STR      r0,[r1,#0]
;;;321    		delay(100);
0000a2  2064              MOVS     r0,#0x64
0000a4  f7fffffe          BL       delay
0000a8  1c58              ADDS     r0,r3,#1              ;317
0000aa  b283              UXTH     r3,r0                 ;317
                  |L7.172|
0000ac  2b0f              CMP      r3,#0xf               ;317
0000ae  dbf4              BLT      |L7.154|
;;;322    		
;;;323      }
;;;324    	
;;;325    }
0000b0  bd00              POP      {pc}
;;;326    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L7.180|
                          DCD      ledArray
                  |L7.184|
                          DCD      0x4009ae20
                  |L7.188|
                          DCD      0x074000e0

                          AREA ||i.delay||, CODE, READONLY, ALIGN=1

                  delay PROC
;;;219    
;;;220    void delay(long int delayTime)
000000  2100              MOVS     r1,#0
;;;221    {
;;;222    	/*long pause;
;;;223    	clock_t now,then;
;;;224    	pause = milliseconds*(CLOCKS_PER_SEC/1000);
;;;225    	now = then =clock();
;;;226    	
;;;227    	while(now-then<pause)
;;;228    	{
;;;229    		now = clock();
;;;230    	}
;;;231    	*/
;;;232    	
;;;233    	for(int i =0;i<delayTime;i++)
000002  e000              B        |L8.6|
                  |L8.4|
000004  1c49              ADDS     r1,r1,#1
                  |L8.6|
000006  4281              CMP      r1,r0
000008  dbfc              BLT      |L8.4|
;;;234    	{
;;;235    		
;;;236    	}
;;;237    }
00000a  4770              BX       lr
;;;238    
                          ENDP


                          AREA ||i.lightning||, CODE, READONLY, ALIGN=2

                  lightning PROC
;;;827    	}
;;;828    void lightning(float maxAmpL, float powerAvgL)
000000  b518              PUSH     {r3,r4,lr}
;;;829    {
;;;830    
;;;831    if (Q == 31)
000002  48fe              LDR      r0,|L9.1020|
000004  6800              LDR      r0,[r0,#0]  ; Q
000006  281f              CMP      r0,#0x1f
000008  d102              BNE      |L9.16|
;;;832    {
;;;833    	Q = 20;
00000a  2014              MOVS     r0,#0x14
00000c  49fb              LDR      r1,|L9.1020|
00000e  6008              STR      r0,[r1,#0]  ; Q
                  |L9.16|
;;;834    }
;;;835    if (U == 500)
000010  48fb              LDR      r0,|L9.1024|
000012  6800              LDR      r0,[r0,#0]  ; U
000014  f5b07ffa          CMP      r0,#0x1f4
000018  d107              BNE      |L9.42|
;;;836    {
;;;837    	U = 0;
00001a  2000              MOVS     r0,#0
00001c  49f8              LDR      r1,|L9.1024|
00001e  6008              STR      r0,[r1,#0]  ; U
;;;838    	Q++;
000020  48f6              LDR      r0,|L9.1020|
000022  6800              LDR      r0,[r0,#0]  ; Q
000024  1c40              ADDS     r0,r0,#1
000026  49f5              LDR      r1,|L9.1020|
000028  6008              STR      r0,[r1,#0]  ; Q
                  |L9.42|
;;;839    }
;;;840    
;;;841    
;;;842    for (int i=248; i<=255; i++)
00002a  24f8              MOVS     r4,#0xf8
00002c  e009              B        |L9.66|
                  |L9.46|
;;;843    {
;;;844    	setLeds(i,Q,255,0,200);
00002e  20c8              MOVS     r0,#0xc8
000030  4af2              LDR      r2,|L9.1020|
000032  9000              STR      r0,[sp,#0]
000034  7811              LDRB     r1,[r2,#0]  ; Q
000036  b2a0              UXTH     r0,r4
000038  2300              MOVS     r3,#0
00003a  22ff              MOVS     r2,#0xff
00003c  f7fffffe          BL       setLeds
000040  1c64              ADDS     r4,r4,#1              ;842
                  |L9.66|
000042  2cff              CMP      r4,#0xff              ;842
000044  ddf3              BLE      |L9.46|
;;;845    }
;;;846    
;;;847    for (int i=216; i<=247; i++)
000046  24d8              MOVS     r4,#0xd8
000048  e009              B        |L9.94|
                  |L9.74|
;;;848    {
;;;849    	setLeds(i,Q,255,0,200);
00004a  20c8              MOVS     r0,#0xc8
00004c  4aeb              LDR      r2,|L9.1020|
00004e  9000              STR      r0,[sp,#0]
000050  7811              LDRB     r1,[r2,#0]  ; Q
000052  b2a0              UXTH     r0,r4
000054  2300              MOVS     r3,#0
000056  22ff              MOVS     r2,#0xff
000058  f7fffffe          BL       setLeds
00005c  1c64              ADDS     r4,r4,#1              ;847
                  |L9.94|
00005e  2cf7              CMP      r4,#0xf7              ;847
000060  ddf3              BLE      |L9.74|
;;;850    }
;;;851    
;;;852    for (int i=164; i<=215; i++)
000062  24a4              MOVS     r4,#0xa4
000064  e009              B        |L9.122|
                  |L9.102|
;;;853    {
;;;854    	setLeds(i,Q,255,200,0);
000066  2000              MOVS     r0,#0
000068  4ae4              LDR      r2,|L9.1020|
00006a  9000              STR      r0,[sp,#0]
00006c  7811              LDRB     r1,[r2,#0]  ; Q
00006e  b2a0              UXTH     r0,r4
000070  23c8              MOVS     r3,#0xc8
000072  22ff              MOVS     r2,#0xff
000074  f7fffffe          BL       setLeds
000078  1c64              ADDS     r4,r4,#1              ;852
                  |L9.122|
00007a  2cd7              CMP      r4,#0xd7              ;852
00007c  ddf3              BLE      |L9.102|
;;;855    }
;;;856    
;;;857    for (int i=92; i<=163; i++)
00007e  245c              MOVS     r4,#0x5c
000080  e009              B        |L9.150|
                  |L9.130|
;;;858    {
;;;859    	setLeds(i,Q,200,255,0);
000082  2000              MOVS     r0,#0
000084  4add              LDR      r2,|L9.1020|
000086  9000              STR      r0,[sp,#0]
000088  7811              LDRB     r1,[r2,#0]  ; Q
00008a  b2a0              UXTH     r0,r4
00008c  23ff              MOVS     r3,#0xff
00008e  22c8              MOVS     r2,#0xc8
000090  f7fffffe          BL       setLeds
000094  1c64              ADDS     r4,r4,#1              ;857
                  |L9.150|
000096  2ca3              CMP      r4,#0xa3              ;857
000098  ddf3              BLE      |L9.130|
;;;860    }
;;;861    
;;;862    for (int i=0; i<=91; i++)
00009a  2400              MOVS     r4,#0
00009c  e009              B        |L9.178|
                  |L9.158|
;;;863    {
;;;864    	setLeds(i,Q,255,0,200);
00009e  20c8              MOVS     r0,#0xc8
0000a0  4ad6              LDR      r2,|L9.1020|
0000a2  9000              STR      r0,[sp,#0]
0000a4  7811              LDRB     r1,[r2,#0]  ; Q
0000a6  b2a0              UXTH     r0,r4
0000a8  2300              MOVS     r3,#0
0000aa  22ff              MOVS     r2,#0xff
0000ac  f7fffffe          BL       setLeds
0000b0  1c64              ADDS     r4,r4,#1              ;862
                  |L9.178|
0000b2  2c5b              CMP      r4,#0x5b              ;862
0000b4  ddf3              BLE      |L9.158|
;;;865    }
;;;866    
;;;867    
;;;868    if(maxAmpL > powerAvgL*10)
0000b6  eeb21a04          VMOV.F32 s2,#10.00000000
0000ba  ee201a81          VMUL.F32 s2,s1,s2
0000be  eeb41ac0          VCMPE.F32 s2,s0
0000c2  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000c6  d27c              BCS      |L9.450|
;;;869    {
;;;870    	setLeds(255,31,255,255,255);
0000c8  20ff              MOVS     r0,#0xff
0000ca  4603              MOV      r3,r0
0000cc  4602              MOV      r2,r0
0000ce  211f              MOVS     r1,#0x1f
0000d0  9000              STR      r0,[sp,#0]
0000d2  f7fffffe          BL       setLeds
;;;871    	setLeds(249,31,255,255,255);
0000d6  20ff              MOVS     r0,#0xff
0000d8  4603              MOV      r3,r0
0000da  4602              MOV      r2,r0
0000dc  211f              MOVS     r1,#0x1f
0000de  9000              STR      r0,[sp,#0]
0000e0  20f9              MOVS     r0,#0xf9
0000e2  f7fffffe          BL       setLeds
;;;872    	setLeds(248,31,255,255,255);
0000e6  20ff              MOVS     r0,#0xff
0000e8  4603              MOV      r3,r0
0000ea  4602              MOV      r2,r0
0000ec  211f              MOVS     r1,#0x1f
0000ee  9000              STR      r0,[sp,#0]
0000f0  20f8              MOVS     r0,#0xf8
0000f2  f7fffffe          BL       setLeds
;;;873    	setLeds(237,31,255,255,255);
0000f6  20ff              MOVS     r0,#0xff
0000f8  4603              MOV      r3,r0
0000fa  4602              MOV      r2,r0
0000fc  211f              MOVS     r1,#0x1f
0000fe  9000              STR      r0,[sp,#0]
000100  20ed              MOVS     r0,#0xed
000102  f7fffffe          BL       setLeds
;;;874    	setLeds(219,31,255,255,255);
000106  20ff              MOVS     r0,#0xff
000108  4603              MOV      r3,r0
00010a  4602              MOV      r2,r0
00010c  211f              MOVS     r1,#0x1f
00010e  9000              STR      r0,[sp,#0]
000110  20db              MOVS     r0,#0xdb
000112  f7fffffe          BL       setLeds
;;;875    	setLeds(195,31,255,255,255);
000116  20ff              MOVS     r0,#0xff
000118  4603              MOV      r3,r0
00011a  4602              MOV      r2,r0
00011c  211f              MOVS     r1,#0x1f
00011e  9000              STR      r0,[sp,#0]
000120  20c3              MOVS     r0,#0xc3
000122  f7fffffe          BL       setLeds
;;;876    	setLeds(167,31,255,255,255);
000126  20ff              MOVS     r0,#0xff
000128  4603              MOV      r3,r0
00012a  4602              MOV      r2,r0
00012c  211f              MOVS     r1,#0x1f
00012e  9000              STR      r0,[sp,#0]
000130  20a7              MOVS     r0,#0xa7
000132  f7fffffe          BL       setLeds
;;;877    	setLeds(135,31,255,255,255);
000136  20ff              MOVS     r0,#0xff
000138  4603              MOV      r3,r0
00013a  4602              MOV      r2,r0
00013c  211f              MOVS     r1,#0x1f
00013e  9000              STR      r0,[sp,#0]
000140  2087              MOVS     r0,#0x87
000142  f7fffffe          BL       setLeds
;;;878    	setLeds(96,31,255,255,255);
000146  20ff              MOVS     r0,#0xff
000148  4603              MOV      r3,r0
00014a  4602              MOV      r2,r0
00014c  211f              MOVS     r1,#0x1f
00014e  9000              STR      r0,[sp,#0]
000150  2060              MOVS     r0,#0x60
000152  f7fffffe          BL       setLeds
;;;879    	setLeds(53,31,255,255,255);
000156  20ff              MOVS     r0,#0xff
000158  4603              MOV      r3,r0
00015a  4602              MOV      r2,r0
00015c  211f              MOVS     r1,#0x1f
00015e  9000              STR      r0,[sp,#0]
000160  2035              MOVS     r0,#0x35
000162  f7fffffe          BL       setLeds
;;;880    	setLeds(6,31,255,255,255);
000166  20ff              MOVS     r0,#0xff
000168  4603              MOV      r3,r0
00016a  4602              MOV      r2,r0
00016c  211f              MOVS     r1,#0x1f
00016e  9000              STR      r0,[sp,#0]
000170  2006              MOVS     r0,#6
000172  f7fffffe          BL       setLeds
;;;881    
;;;882    	setLeds(255,31,255,255,255);
000176  20ff              MOVS     r0,#0xff
000178  4603              MOV      r3,r0
00017a  4602              MOV      r2,r0
00017c  211f              MOVS     r1,#0x1f
00017e  9000              STR      r0,[sp,#0]
000180  f7fffffe          BL       setLeds
;;;883    	setLeds(250,31,255,255,255);
000184  20ff              MOVS     r0,#0xff
000186  4603              MOV      r3,r0
000188  4602              MOV      r2,r0
00018a  211f              MOVS     r1,#0x1f
00018c  9000              STR      r0,[sp,#0]
00018e  20fa              MOVS     r0,#0xfa
000190  f7fffffe          BL       setLeds
;;;884    	setLeds(251,31,255,255,255);
000194  20ff              MOVS     r0,#0xff
000196  4603              MOV      r3,r0
000198  4602              MOV      r2,r0
00019a  211f              MOVS     r1,#0x1f
00019c  9000              STR      r0,[sp,#0]
00019e  20fb              MOVS     r0,#0xfb
0001a0  f7fffffe          BL       setLeds
;;;885    	setLeds(240,31,255,255,255);
0001a4  20ff              MOVS     r0,#0xff
0001a6  4603              MOV      r3,r0
0001a8  4602              MOV      r2,r0
0001aa  211f              MOVS     r1,#0x1f
0001ac  9000              STR      r0,[sp,#0]
0001ae  20f0              MOVS     r0,#0xf0
0001b0  f7fffffe          BL       setLeds
;;;886    	setLeds(224,31,255,255,255);
0001b4  20ff              MOVS     r0,#0xff
0001b6  4603              MOV      r3,r0
0001b8  4602              MOV      r2,r0
0001ba  211f              MOVS     r1,#0x1f
0001bc  9000              STR      r0,[sp,#0]
0001be  20e0              MOVS     r0,#0xe0
0001c0  e000              B        |L9.452|
                  |L9.450|
0001c2  e13c              B        |L9.1086|
                  |L9.452|
0001c4  f7fffffe          BL       setLeds
;;;887    	setLeds(201,31,255,255,255);
0001c8  20ff              MOVS     r0,#0xff
0001ca  4603              MOV      r3,r0
0001cc  4602              MOV      r2,r0
0001ce  211f              MOVS     r1,#0x1f
0001d0  9000              STR      r0,[sp,#0]
0001d2  20c9              MOVS     r0,#0xc9
0001d4  f7fffffe          BL       setLeds
;;;888    	setLeds(174,31,255,255,255);
0001d8  20ff              MOVS     r0,#0xff
0001da  4603              MOV      r3,r0
0001dc  4602              MOV      r2,r0
0001de  211f              MOVS     r1,#0x1f
0001e0  9000              STR      r0,[sp,#0]
0001e2  20ae              MOVS     r0,#0xae
0001e4  f7fffffe          BL       setLeds
;;;889    	setLeds(144,31,255,255,255);
0001e8  20ff              MOVS     r0,#0xff
0001ea  4603              MOV      r3,r0
0001ec  4602              MOV      r2,r0
0001ee  211f              MOVS     r1,#0x1f
0001f0  9000              STR      r0,[sp,#0]
0001f2  2090              MOVS     r0,#0x90
0001f4  f7fffffe          BL       setLeds
;;;890    	setLeds(106,31,255,255,255);
0001f8  20ff              MOVS     r0,#0xff
0001fa  4603              MOV      r3,r0
0001fc  4602              MOV      r2,r0
0001fe  211f              MOVS     r1,#0x1f
000200  9000              STR      r0,[sp,#0]
000202  206a              MOVS     r0,#0x6a
000204  f7fffffe          BL       setLeds
;;;891    	setLeds(63,31,255,255,255);
000208  20ff              MOVS     r0,#0xff
00020a  4603              MOV      r3,r0
00020c  4602              MOV      r2,r0
00020e  211f              MOVS     r1,#0x1f
000210  9000              STR      r0,[sp,#0]
000212  203f              MOVS     r0,#0x3f
000214  f7fffffe          BL       setLeds
;;;892    	setLeds(17,31,255,255,255);
000218  20ff              MOVS     r0,#0xff
00021a  4603              MOV      r3,r0
00021c  4602              MOV      r2,r0
00021e  211f              MOVS     r1,#0x1f
000220  9000              STR      r0,[sp,#0]
000222  2011              MOVS     r0,#0x11
000224  f7fffffe          BL       setLeds
;;;893    
;;;894    	setLeds(255,31,255,255,255);
000228  20ff              MOVS     r0,#0xff
00022a  4603              MOV      r3,r0
00022c  4602              MOV      r2,r0
00022e  211f              MOVS     r1,#0x1f
000230  9000              STR      r0,[sp,#0]
000232  f7fffffe          BL       setLeds
;;;895    	setLeds(250,31,255,255,255);
000236  20ff              MOVS     r0,#0xff
000238  4603              MOV      r3,r0
00023a  4602              MOV      r2,r0
00023c  211f              MOVS     r1,#0x1f
00023e  9000              STR      r0,[sp,#0]
000240  20fa              MOVS     r0,#0xfa
000242  f7fffffe          BL       setLeds
;;;896    	setLeds(251,31,255,255,255);
000246  20ff              MOVS     r0,#0xff
000248  4603              MOV      r3,r0
00024a  4602              MOV      r2,r0
00024c  211f              MOVS     r1,#0x1f
00024e  9000              STR      r0,[sp,#0]
000250  20fb              MOVS     r0,#0xfb
000252  f7fffffe          BL       setLeds
;;;897    	setLeds(240,31,255,255,255);
000256  20ff              MOVS     r0,#0xff
000258  4603              MOV      r3,r0
00025a  4602              MOV      r2,r0
00025c  211f              MOVS     r1,#0x1f
00025e  9000              STR      r0,[sp,#0]
000260  20f0              MOVS     r0,#0xf0
000262  f7fffffe          BL       setLeds
;;;898    	setLeds(224,31,255,255,255);
000266  20ff              MOVS     r0,#0xff
000268  4603              MOV      r3,r0
00026a  4602              MOV      r2,r0
00026c  211f              MOVS     r1,#0x1f
00026e  9000              STR      r0,[sp,#0]
000270  20e0              MOVS     r0,#0xe0
000272  f7fffffe          BL       setLeds
;;;899    	setLeds(201,31,255,255,255);
000276  20ff              MOVS     r0,#0xff
000278  4603              MOV      r3,r0
00027a  4602              MOV      r2,r0
00027c  211f              MOVS     r1,#0x1f
00027e  9000              STR      r0,[sp,#0]
000280  20c9              MOVS     r0,#0xc9
000282  f7fffffe          BL       setLeds
;;;900    	setLeds(174,31,255,255,255);
000286  20ff              MOVS     r0,#0xff
000288  4603              MOV      r3,r0
00028a  4602              MOV      r2,r0
00028c  211f              MOVS     r1,#0x1f
00028e  9000              STR      r0,[sp,#0]
000290  20ae              MOVS     r0,#0xae
000292  f7fffffe          BL       setLeds
;;;901    	setLeds(144,31,255,255,255);
000296  20ff              MOVS     r0,#0xff
000298  4603              MOV      r3,r0
00029a  4602              MOV      r2,r0
00029c  211f              MOVS     r1,#0x1f
00029e  9000              STR      r0,[sp,#0]
0002a0  2090              MOVS     r0,#0x90
0002a2  f7fffffe          BL       setLeds
;;;902    	setLeds(106,31,255,255,255);
0002a6  20ff              MOVS     r0,#0xff
0002a8  4603              MOV      r3,r0
0002aa  4602              MOV      r2,r0
0002ac  211f              MOVS     r1,#0x1f
0002ae  9000              STR      r0,[sp,#0]
0002b0  206a              MOVS     r0,#0x6a
0002b2  f7fffffe          BL       setLeds
;;;903    	setLeds(63,31,255,255,255);
0002b6  20ff              MOVS     r0,#0xff
0002b8  4603              MOV      r3,r0
0002ba  4602              MOV      r2,r0
0002bc  211f              MOVS     r1,#0x1f
0002be  9000              STR      r0,[sp,#0]
0002c0  203f              MOVS     r0,#0x3f
0002c2  f7fffffe          BL       setLeds
;;;904    	setLeds(17,31,255,255,255);
0002c6  20ff              MOVS     r0,#0xff
0002c8  4603              MOV      r3,r0
0002ca  4602              MOV      r2,r0
0002cc  211f              MOVS     r1,#0x1f
0002ce  9000              STR      r0,[sp,#0]
0002d0  2011              MOVS     r0,#0x11
0002d2  f7fffffe          BL       setLeds
;;;905    
;;;906    	setLeds(255,31,255,255,255);
0002d6  20ff              MOVS     r0,#0xff
0002d8  4603              MOV      r3,r0
0002da  4602              MOV      r2,r0
0002dc  211f              MOVS     r1,#0x1f
0002de  9000              STR      r0,[sp,#0]
0002e0  f7fffffe          BL       setLeds
;;;907    	setLeds(252,31,255,255,255);
0002e4  20ff              MOVS     r0,#0xff
0002e6  4603              MOV      r3,r0
0002e8  4602              MOV      r2,r0
0002ea  211f              MOVS     r1,#0x1f
0002ec  9000              STR      r0,[sp,#0]
0002ee  20fc              MOVS     r0,#0xfc
0002f0  f7fffffe          BL       setLeds
;;;908    	setLeds(251,31,255,255,255);
0002f4  20ff              MOVS     r0,#0xff
0002f6  4603              MOV      r3,r0
0002f8  4602              MOV      r2,r0
0002fa  211f              MOVS     r1,#0x1f
0002fc  9000              STR      r0,[sp,#0]
0002fe  20fb              MOVS     r0,#0xfb
000300  f7fffffe          BL       setLeds
;;;909    	setLeds(244,31,255,255,255);
000304  20ff              MOVS     r0,#0xff
000306  4603              MOV      r3,r0
000308  4602              MOV      r2,r0
00030a  211f              MOVS     r1,#0x1f
00030c  9000              STR      r0,[sp,#0]
00030e  20f4              MOVS     r0,#0xf4
000310  f7fffffe          BL       setLeds
;;;910    	setLeds(229,31,255,255,255);
000314  20ff              MOVS     r0,#0xff
000316  4603              MOV      r3,r0
000318  4602              MOV      r2,r0
00031a  211f              MOVS     r1,#0x1f
00031c  9000              STR      r0,[sp,#0]
00031e  20e5              MOVS     r0,#0xe5
000320  f7fffffe          BL       setLeds
;;;911    	setLeds(207,31,255,255,255);
000324  20ff              MOVS     r0,#0xff
000326  4603              MOV      r3,r0
000328  4602              MOV      r2,r0
00032a  211f              MOVS     r1,#0x1f
00032c  9000              STR      r0,[sp,#0]
00032e  20cf              MOVS     r0,#0xcf
000330  f7fffffe          BL       setLeds
;;;912    	setLeds(181,31,255,255,255);
000334  20ff              MOVS     r0,#0xff
000336  4603              MOV      r3,r0
000338  4602              MOV      r2,r0
00033a  211f              MOVS     r1,#0x1f
00033c  9000              STR      r0,[sp,#0]
00033e  20b5              MOVS     r0,#0xb5
000340  f7fffffe          BL       setLeds
;;;913    	setLeds(151,31,255,255,255);
000344  20ff              MOVS     r0,#0xff
000346  4603              MOV      r3,r0
000348  4602              MOV      r2,r0
00034a  211f              MOVS     r1,#0x1f
00034c  9000              STR      r0,[sp,#0]
00034e  2097              MOVS     r0,#0x97
000350  f7fffffe          BL       setLeds
;;;914    	setLeds(115,31,255,255,255);
000354  20ff              MOVS     r0,#0xff
000356  4603              MOV      r3,r0
000358  4602              MOV      r2,r0
00035a  211f              MOVS     r1,#0x1f
00035c  9000              STR      r0,[sp,#0]
00035e  2073              MOVS     r0,#0x73
000360  f7fffffe          BL       setLeds
;;;915    	setLeds(74,31,255,255,255);
000364  20ff              MOVS     r0,#0xff
000366  4603              MOV      r3,r0
000368  4602              MOV      r2,r0
00036a  211f              MOVS     r1,#0x1f
00036c  9000              STR      r0,[sp,#0]
00036e  204a              MOVS     r0,#0x4a
000370  f7fffffe          BL       setLeds
;;;916    	setLeds(29,31,255,255,255);
000374  20ff              MOVS     r0,#0xff
000376  4603              MOV      r3,r0
000378  4602              MOV      r2,r0
00037a  211f              MOVS     r1,#0x1f
00037c  9000              STR      r0,[sp,#0]
00037e  201d              MOVS     r0,#0x1d
000380  f7fffffe          BL       setLeds
;;;917    
;;;918    	setLeds(255,31,255,255,255);
000384  20ff              MOVS     r0,#0xff
000386  4603              MOV      r3,r0
000388  4602              MOV      r2,r0
00038a  211f              MOVS     r1,#0x1f
00038c  9000              STR      r0,[sp,#0]
00038e  f7fffffe          BL       setLeds
;;;919    	setLeds(253,31,255,255,255);
000392  20ff              MOVS     r0,#0xff
000394  4603              MOV      r3,r0
000396  4602              MOV      r2,r0
000398  211f              MOVS     r1,#0x1f
00039a  9000              STR      r0,[sp,#0]
00039c  20fd              MOVS     r0,#0xfd
00039e  f7fffffe          BL       setLeds
;;;920    	setLeds(252,31,255,255,255);
0003a2  20ff              MOVS     r0,#0xff
0003a4  4603              MOV      r3,r0
0003a6  4602              MOV      r2,r0
0003a8  211f              MOVS     r1,#0x1f
0003aa  9000              STR      r0,[sp,#0]
0003ac  20fc              MOVS     r0,#0xfc
0003ae  f7fffffe          BL       setLeds
;;;921    	setLeds(246,31,255,255,255);
0003b2  20ff              MOVS     r0,#0xff
0003b4  4603              MOV      r3,r0
0003b6  4602              MOV      r2,r0
0003b8  211f              MOVS     r1,#0x1f
0003ba  9000              STR      r0,[sp,#0]
0003bc  20f6              MOVS     r0,#0xf6
0003be  f7fffffe          BL       setLeds
;;;922    	setLeds(233,31,255,255,255);
0003c2  20ff              MOVS     r0,#0xff
0003c4  4603              MOV      r3,r0
0003c6  4602              MOV      r2,r0
0003c8  211f              MOVS     r1,#0x1f
0003ca  9000              STR      r0,[sp,#0]
0003cc  20e9              MOVS     r0,#0xe9
0003ce  f7fffffe          BL       setLeds
;;;923    	setLeds(213,31,255,255,255);
0003d2  20ff              MOVS     r0,#0xff
0003d4  4603              MOV      r3,r0
0003d6  4602              MOV      r2,r0
0003d8  211f              MOVS     r1,#0x1f
0003da  9000              STR      r0,[sp,#0]
0003dc  20d5              MOVS     r0,#0xd5
0003de  f7fffffe          BL       setLeds
;;;924    	setLeds(188,31,255,255,255);
0003e2  20ff              MOVS     r0,#0xff
0003e4  4603              MOV      r3,r0
0003e6  4602              MOV      r2,r0
0003e8  211f              MOVS     r1,#0x1f
0003ea  9000              STR      r0,[sp,#0]
0003ec  20bc              MOVS     r0,#0xbc
0003ee  f7fffffe          BL       setLeds
;;;925    	setLeds(159,31,255,255,255);
0003f2  20ff              MOVS     r0,#0xff
0003f4  4603              MOV      r3,r0
0003f6  4602              MOV      r2,r0
0003f8  211f              MOVS     r1,#0x1f
0003fa  e003              B        |L9.1028|
                  |L9.1020|
                          DCD      Q
                  |L9.1024|
                          DCD      U
                  |L9.1028|
000404  9000              STR      r0,[sp,#0]
000406  209f              MOVS     r0,#0x9f
000408  f7fffffe          BL       setLeds
;;;926    	setLeds(125,31,255,255,255);
00040c  20ff              MOVS     r0,#0xff
00040e  4603              MOV      r3,r0
000410  4602              MOV      r2,r0
000412  211f              MOVS     r1,#0x1f
000414  9000              STR      r0,[sp,#0]
000416  207d              MOVS     r0,#0x7d
000418  f7fffffe          BL       setLeds
;;;927    	setLeds(85,31,255,255,255);
00041c  20ff              MOVS     r0,#0xff
00041e  4603              MOV      r3,r0
000420  4602              MOV      r2,r0
000422  211f              MOVS     r1,#0x1f
000424  9000              STR      r0,[sp,#0]
000426  2055              MOVS     r0,#0x55
000428  f7fffffe          BL       setLeds
;;;928    	setLeds(41,31,255,255,255);
00042c  20ff              MOVS     r0,#0xff
00042e  4603              MOV      r3,r0
000430  4602              MOV      r2,r0
000432  211f              MOVS     r1,#0x1f
000434  9000              STR      r0,[sp,#0]
000436  2029              MOVS     r0,#0x29
000438  f7fffffe          BL       setLeds
00043c  e05a              B        |L9.1268|
                  |L9.1086|
;;;929    }
;;;930    
;;;931    else if(maxAmpL > powerAvgL*8)
00043e  eeb21a00          VMOV.F32 s2,#8.00000000
000442  ee201a81          VMUL.F32 s2,s1,s2
000446  eeb41ac0          VCMPE.F32 s2,s0
00044a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00044e  d20d              BCS      |L9.1132|
;;;932    {
;;;933    for (int i=216; i<=247; i+=2)
000450  24d8              MOVS     r4,#0xd8
000452  e008              B        |L9.1126|
                  |L9.1108|
;;;934    {
;;;935    	setLeds(i,31,0,200,255);
000454  20ff              MOVS     r0,#0xff
000456  9000              STR      r0,[sp,#0]
000458  b2a0              UXTH     r0,r4
00045a  23c8              MOVS     r3,#0xc8
00045c  2200              MOVS     r2,#0
00045e  211f              MOVS     r1,#0x1f
000460  f7fffffe          BL       setLeds
000464  1ca4              ADDS     r4,r4,#2              ;933
                  |L9.1126|
000466  2cf7              CMP      r4,#0xf7              ;933
000468  ddf4              BLE      |L9.1108|
00046a  e043              B        |L9.1268|
                  |L9.1132|
;;;936    }
;;;937    }
;;;938    
;;;939    else if(maxAmpL > powerAvgL*6)
00046c  eeb11a08          VMOV.F32 s2,#6.00000000
000470  ee201a81          VMUL.F32 s2,s1,s2
000474  eeb41ac0          VCMPE.F32 s2,s0
000478  eef1fa10          VMRS     APSR_nzcv,FPSCR
00047c  d20d              BCS      |L9.1178|
;;;940    {
;;;941    for (int i=164; i<=215; i+=2)
00047e  24a4              MOVS     r4,#0xa4
000480  e008              B        |L9.1172|
                  |L9.1154|
;;;942    {
;;;943    	setLeds(i,31,0,200,255);
000482  20ff              MOVS     r0,#0xff
000484  9000              STR      r0,[sp,#0]
000486  b2a0              UXTH     r0,r4
000488  23c8              MOVS     r3,#0xc8
00048a  2200              MOVS     r2,#0
00048c  211f              MOVS     r1,#0x1f
00048e  f7fffffe          BL       setLeds
000492  1ca4              ADDS     r4,r4,#2              ;941
                  |L9.1172|
000494  2cd7              CMP      r4,#0xd7              ;941
000496  ddf4              BLE      |L9.1154|
000498  e02c              B        |L9.1268|
                  |L9.1178|
;;;944    }
;;;945    }
;;;946    
;;;947    else if(maxAmpL > powerAvgL*4)
00049a  eeb11a00          VMOV.F32 s2,#4.00000000
00049e  ee201a81          VMUL.F32 s2,s1,s2
0004a2  eeb41ac0          VCMPE.F32 s2,s0
0004a6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0004aa  d20d              BCS      |L9.1224|
;;;948    {
;;;949    for (int i=92; i<=163; i+=2)
0004ac  245c              MOVS     r4,#0x5c
0004ae  e008              B        |L9.1218|
                  |L9.1200|
;;;950    {
;;;951    	setLeds(i,31,0,200,255);
0004b0  20ff              MOVS     r0,#0xff
0004b2  9000              STR      r0,[sp,#0]
0004b4  b2a0              UXTH     r0,r4
0004b6  23c8              MOVS     r3,#0xc8
0004b8  2200              MOVS     r2,#0
0004ba  211f              MOVS     r1,#0x1f
0004bc  f7fffffe          BL       setLeds
0004c0  1ca4              ADDS     r4,r4,#2              ;949
                  |L9.1218|
0004c2  2ca3              CMP      r4,#0xa3              ;949
0004c4  ddf4              BLE      |L9.1200|
0004c6  e015              B        |L9.1268|
                  |L9.1224|
;;;952    }
;;;953    }
;;;954    
;;;955    else if(maxAmpL > powerAvgL*2)
0004c8  eeb01a00          VMOV.F32 s2,#2.00000000
0004cc  ee201a81          VMUL.F32 s2,s1,s2
0004d0  eeb41ac0          VCMPE.F32 s2,s0
0004d4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0004d8  d20c              BCS      |L9.1268|
;;;956    {
;;;957    for (int i=0; i<=91; i+=2)
0004da  2400              MOVS     r4,#0
0004dc  e008              B        |L9.1264|
                  |L9.1246|
;;;958    {
;;;959    	setLeds(i,31,0,200,255);
0004de  20ff              MOVS     r0,#0xff
0004e0  9000              STR      r0,[sp,#0]
0004e2  b2a0              UXTH     r0,r4
0004e4  23c8              MOVS     r3,#0xc8
0004e6  2200              MOVS     r2,#0
0004e8  211f              MOVS     r1,#0x1f
0004ea  f7fffffe          BL       setLeds
0004ee  1ca4              ADDS     r4,r4,#2              ;957
                  |L9.1264|
0004f0  2c5b              CMP      r4,#0x5b              ;957
0004f2  ddf4              BLE      |L9.1246|
                  |L9.1268|
;;;960    }
;;;961    }
;;;962    showleds();
0004f4  f7fffffe          BL       showleds
;;;963    }
0004f8  bd18              POP      {r3,r4,pc}
;;;964    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;1092   
;;;1093   int main(void)
000000  ed2d8b04          VPUSH    {d8-d9}
;;;1094   {
000004  b094              SUB      sp,sp,#0x50
;;;1095   		ledArray = Array; // set pointer ledarray = address of Array[0];
000006  48f8              LDR      r0,|L10.1000|
000008  49f8              LDR      r1,|L10.1004|
00000a  6008              STR      r0,[r1,#0]  ; ledArray
;;;1096   		
;;;1097   	 // threshPointM = thresholdM;
;;;1098   		Init_SPI();
00000c  f7fffffe          BL       Init_SPI
;;;1099   		clearDisk(); 
000010  f7fffffe          BL       clearDisk
;;;1100   		//startUp();
;;;1101   		//Some temporary variables for reading the touch screen
;;;1102     	int32_t x=10,y=10;
000014  200a              MOVS     r0,#0xa
000016  9013              STR      r0,[sp,#0x4c]
000018  9012              STR      r0,[sp,#0x48]
;;;1103   		
;;;1104   	 //We are going to make a variable that stores the coordinate of the slider. 
;;;1105   	 //I will instialize the value to somewhere in the middle
;;;1106     
;;;1107   	  //int32_t MonkeySliderPosition = (SLIDER_REGION_STOP_X + SLIDER_REGION_START_X)/2;
;;;1108   	
;;;1109   		//some variables for the touch screen driver
;;;1110       ft5406_handle_t touch_handle;
;;;1111      
;;;1112   		touch_event_t touch_event;
;;;1113   	
;;;1114   	
;;;1115       CLOCK_EnableClock(kCLOCK_InputMux);
00001a  200b              MOVS     r0,#0xb
00001c  f7fffffe          BL       CLOCK_EnableClock
;;;1116   		
;;;1117       CLOCK_EnableClock(kCLOCK_Iocon);
000020  200d              MOVS     r0,#0xd
000022  f7fffffe          BL       CLOCK_EnableClock
;;;1118   	
;;;1119       CLOCK_EnableClock(kCLOCK_Gpio0);
000026  200e              MOVS     r0,#0xe
000028  f7fffffe          BL       CLOCK_EnableClock
;;;1120     
;;;1121       CLOCK_EnableClock(kCLOCK_Gpio1);
00002c  200f              MOVS     r0,#0xf
00002e  f7fffffe          BL       CLOCK_EnableClock
;;;1122   		
;;;1123       CLOCK_EnableClock(kCLOCK_Gpio2);
000032  2010              MOVS     r0,#0x10
000034  f7fffffe          BL       CLOCK_EnableClock
;;;1124     
;;;1125       CLOCK_EnableClock(kCLOCK_Gpio3);
000038  2011              MOVS     r0,#0x11
00003a  f7fffffe          BL       CLOCK_EnableClock
;;;1126   			
;;;1127       CLOCK_EnableClock(kCLOCK_Gpio4);
00003e  f2402009          MOV      r0,#0x209
000042  f7fffffe          BL       CLOCK_EnableClock
;;;1128   		
;;;1129   		CLOCK_EnableClock(kCLOCK_FlexComm2);
000046  f240100d          MOV      r0,#0x10d
00004a  f7fffffe          BL       CLOCK_EnableClock
;;;1130   		
;;;1131   
;;;1132     	/* USART0 clock */
;;;1133       CLOCK_AttachClk(BOARD_DEBUG_UART_CLK_ATTACH);
00004e  f44f7086          MOV      r0,#0x10c
000052  f7fffffe          BL       CLOCK_AttachClk
;;;1134   
;;;1135       /* Initialize the rest */
;;;1136       BOARD_InitPins();
000056  f7fffffe          BL       BOARD_InitPins
;;;1137   	
;;;1138   	
;;;1139   		/*
;;;1140   			 This function is implemented abocce.  This will get the CPU running at 180Mhz.
;;;1141   		*/
;;;1142   	
;;;1143       BOARD_BootClock_PLL_RUN();
00005a  f7fffffe          BL       BOARD_BootClock_PLL_RUN
;;;1144     
;;;1145       BOARD_InitDebugConsole();
00005e  f7fffffe          BL       BOARD_InitDebugConsole
;;;1146   
;;;1147   		//BOARD_BootClockRUN();
;;;1148   
;;;1149   	/*
;;;1150   			There is a bunch of (16MB) of flash hooked up to the LPC54608 via a special interface called "SPIFI".
;;;1151   			we need to make sure it is initialized.   This is where all of the bitmap "sprites" are stored.
;;;1152   			SPIFI is a flash interface that is serial but appears like normal flash memory in the address space of LPC54608
;;;1153   	*/
;;;1154   		BOARD_InitSPIFI_ExternalFlash();
000062  f7fffffe          BL       BOARD_InitSPIFI_ExternalFlash
;;;1155   		
;;;1156   
;;;1157   		/*
;;;1158   				
;;;1159   		IMPORTANT  
;;;1160   
;;;1161   		The guts of this function is a bit different than the previous labs as the
;;;1162   		system clock frequency is now 180MHz.  we have to kick in additional dividers for the SDRAM
;;;1163   		to operate correctly.   You will need to the version in this lab if you are going to run at 180MHz.
;;;1164   		Just a warning if you are copying this project elsewhere.
;;;1165   
;;;1166   		*/
;;;1167   
;;;1168   		BOARD_InitSDRAM();
000066  f7fffffe          BL       BOARD_InitSDRAM
;;;1169   
;;;1170   		/*
;;;1171   				
;;;1172   		IMPORTANT  
;;;1173   
;;;1174   		The guts of this function is a bit different than the previous labs (labs 1 - 4) as the
;;;1175   		system clock frequency is now 180MHz.  we have to kick in additional dividers for the LCD.
;;;1176   		to operate correctly.   You will need to the version in this lab if you are going to run at 180MHz.
;;;1177   		Just a warning if you are copying this project elsewhere.
;;;1178   
;;;1179   		*/
;;;1180   
;;;1181   		eGFX_InitDriver();
00006a  f7fffffe          BL       eGFX_InitDriver
;;;1182   	 
;;;1183   		InitMicBuffers();
00006e  f7fffffe          BL       InitMicBuffers
;;;1184       InitAudio_CODEC();
000072  f7fffffe          BL       InitAudio_CODEC
;;;1185   
;;;1186   
;;;1187   		
;;;1188   		FT5406_Init(&touch_handle,I2C2);
000076  49de              LDR      r1,|L10.1008|
000078  a803              ADD      r0,sp,#0xc
00007a  f7fffffe          BL       FT5406_Init
;;;1189   	
;;;1190   		arm_rfft_fast_init_f32(&MyFFT,256);
00007e  f44f7180          MOV      r1,#0x100
000082  48dc              LDR      r0,|L10.1012|
000084  f7fffffe          BL       arm_rfft_fast_init_f32
;;;1191   		
;;;1192   			float maxAmpL;
;;;1193   			float maxAmpM;
;;;1194   			float maxAmpH;
;;;1195   		//eGFX_Dump(&eGFX_BackBuffer);
;;;1196   		
;;;1197   		eGFX_ImagePlane_Clear(&eGFX_BackBuffer);
000088  48db              LDR      r0,|L10.1016|
00008a  f7fffffe          BL       eGFX_ImagePlane_Clear
;;;1198   		
;;;1199   	//HERE	
;;;1200   	
;;;1201   	eGFX_Blit(&eGFX_BackBuffer,
00008e  4bdb              LDR      r3,|L10.1020|
000090  2223              MOVS     r2,#0x23
000092  210f              MOVS     r1,#0xf
000094  48d8              LDR      r0,|L10.1016|
000096  f7fffffe          BL       eGFX_Blit
;;;1202   								15,  //x coordinate of where to put the monkey head
;;;1203   								35,																			 //y coordinate of where to put the monkey head
;;;1204   								&Sprite_16BPP_565_pie);	
;;;1205   			
;;;1206   			eGFX_Blit(&eGFX_BackBuffer,
00009a  48d8              LDR      r0,|L10.1020|
00009c  8900              LDRH     r0,[r0,#8]  ; Sprite_16BPP_565_pie
00009e  301e              ADDS     r0,r0,#0x1e
0000a0  b201              SXTH     r1,r0
0000a2  4bd7              LDR      r3,|L10.1024|
0000a4  2223              MOVS     r2,#0x23
0000a6  48d4              LDR      r0,|L10.1016|
0000a8  f7fffffe          BL       eGFX_Blit
;;;1207   								Sprite_16BPP_565_pie.SizeX + 30,  //x coordinate of where to put the monkey head
;;;1208   								35,																			 //y coordinate of where to put the monkey head
;;;1209   								&Sprite_16BPP_565_stop);
;;;1210   			
;;;1211   			eGFX_Blit(&eGFX_BackBuffer,
0000ac  48d4              LDR      r0,|L10.1024|
0000ae  8900              LDRH     r0,[r0,#8]  ; Sprite_16BPP_565_stop
0000b0  222d              MOVS     r2,#0x2d
0000b2  eb020040          ADD      r0,r2,r0,LSL #1
0000b6  b201              SXTH     r1,r0
0000b8  4bd2              LDR      r3,|L10.1028|
0000ba  2223              MOVS     r2,#0x23
0000bc  48ce              LDR      r0,|L10.1016|
0000be  f7fffffe          BL       eGFX_Blit
;;;1212   								Sprite_16BPP_565_stop.SizeX*2 +45,  //x coordinate of where to put the monkey head
;;;1213   								35,																			 //y coordinate of where to put the monkey head
;;;1214   								&Sprite_16BPP_565_light);	
;;;1215   			
;;;1216   			
;;;1217   				 
;;;1218   								
;;;1219   		eGFX_printf_Colored(&eGFX_BackBuffer,
0000c2  a0d1              ADR      r0,|L10.1032|
0000c4  211f              MOVS     r1,#0x1f
0000c6  4bd3              LDR      r3,|L10.1044|
0000c8  220a              MOVS     r2,#0xa
0000ca  e9cd1000          STRD     r1,r0,[sp,#0]
0000ce  2132              MOVS     r1,#0x32
0000d0  48c9              LDR      r0,|L10.1016|
0000d2  f7fffffe          BL       eGFX_printf_Colored
;;;1220   													50,10,   //The x and y coordinate of where to draw the text.
;;;1221   													&OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP,   //Long font name!
;;;1222   													eGFX_RGB888_TO_RGB565(0,0,255),
;;;1223   													"pieChunks");
;;;1224   		
;;;1225   			
;;;1226   			eGFX_printf_Colored(&eGFX_BackBuffer,
0000d6  a0d0              ADR      r0,|L10.1048|
0000d8  211f              MOVS     r1,#0x1f
0000da  4bce              LDR      r3,|L10.1044|
0000dc  220a              MOVS     r2,#0xa
0000de  e9cd1000          STRD     r1,r0,[sp,#0]
0000e2  21c8              MOVS     r1,#0xc8
0000e4  48c4              LDR      r0,|L10.1016|
0000e6  f7fffffe          BL       eGFX_printf_Colored
;;;1227   													200,10,   //The x and y coordinate of where to draw the text.
;;;1228   													&OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP,   //Long font name!
;;;1229   													eGFX_RGB888_TO_RGB565(0,0,255),
;;;1230   													"stopLight");
;;;1231   													
;;;1232   				
;;;1233   			eGFX_printf_Colored(&eGFX_BackBuffer,
0000ea  a0ce              ADR      r0,|L10.1060|
0000ec  211f              MOVS     r1,#0x1f
0000ee  4bc9              LDR      r3,|L10.1044|
0000f0  220a              MOVS     r2,#0xa
0000f2  e9cd1000          STRD     r1,r0,[sp,#0]
0000f6  f44f71b1          MOV      r1,#0x162
0000fa  48bf              LDR      r0,|L10.1016|
0000fc  f7fffffe          BL       eGFX_printf_Colored
;;;1234   													354,10,   //The x and y coordinate of where to draw the text.
;;;1235   													&OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP,   //Long font name!
;;;1236   													eGFX_RGB888_TO_RGB565(0,0,255),
;;;1237   													"lightning");	
;;;1238   
;;;1239   		
;;;1240   		eGFX_Dump(&eGFX_BackBuffer);     //Uncomment this, build, debug. Then recomment build debug.
000100  48bd              LDR      r0,|L10.1016|
000102  f7fffffe          BL       eGFX_Dump
;;;1241   		eGFX_ImagePlane_Clear(&eGFX_BackBuffer);
000106  48bc              LDR      r0,|L10.1016|
000108  f7fffffe          BL       eGFX_ImagePlane_Clear
;;;1242   	
;;;1243   			
;;;1244   			
;;;1245   			
;;;1246   		
;;;1247   		while(1)
00010c  e1c5              B        |L10.1178|
                  |L10.270|
;;;1248   		{
;;;1249   	
;;;1250   					//Clear the backbuffer									
;;;1251   				 
;;;1252   			
;;;1253   			
;;;1254   			 //read in the x,y coordinate of the the touch sensor if there is a good reading.
;;;1255           if (kStatus_Success == FT5406_GetSingleTouch(&touch_handle, &touch_event, &y, &x))
00010e  ab13              ADD      r3,sp,#0x4c
000110  aa12              ADD      r2,sp,#0x48
000112  a902              ADD      r1,sp,#8
000114  a803              ADD      r0,sp,#0xc
000116  f7fffffe          BL       FT5406_GetSingleTouch
00011a  2800              CMP      r0,#0
00011c  d151              BNE      |L10.450|
;;;1256           {
;;;1257   					
;;;1258   					
;;;1259               if (touch_event == kTouch_Contact)
00011e  f89d0008          LDRB     r0,[sp,#8]
000122  2802              CMP      r0,#2
000124  d14d              BNE      |L10.450|
;;;1260               {
;;;1261   								//Check to see if we are in the slider area
;;;1262   							  if(	 x>=10 && x<=Sprite_16BPP_565_pie.SizeX + 10 
000126  9813              LDR      r0,[sp,#0x4c]
000128  280a              CMP      r0,#0xa
00012a  db17              BLT      |L10.348|
00012c  48b3              LDR      r0,|L10.1020|
00012e  8900              LDRH     r0,[r0,#8]  ; Sprite_16BPP_565_pie
000130  300a              ADDS     r0,r0,#0xa
000132  9913              LDR      r1,[sp,#0x4c]
000134  4288              CMP      r0,r1
000136  db11              BLT      |L10.348|
;;;1263   									&& y>15 && y<= Sprite_16BPP_565_pie.SizeY +15)
000138  9812              LDR      r0,[sp,#0x48]
00013a  280f              CMP      r0,#0xf
00013c  dd0e              BLE      |L10.348|
00013e  48af              LDR      r0,|L10.1020|
000140  8940              LDRH     r0,[r0,#0xa]  ; Sprite_16BPP_565_pie
000142  300f              ADDS     r0,r0,#0xf
000144  9912              LDR      r1,[sp,#0x48]
000146  4288              CMP      r0,r1
000148  db08              BLT      |L10.348|
;;;1264   								{
;;;1265   										//Store the Value
;;;1266   											
;;;1267   									pC=1;
00014a  2001              MOVS     r0,#1
00014c  49b8              LDR      r1,|L10.1072|
00014e  6008              STR      r0,[r1,#0]  ; pC
;;;1268   									s=0;
000150  2000              MOVS     r0,#0
000152  49b8              LDR      r1,|L10.1076|
000154  6008              STR      r0,[r1,#0]  ; s
;;;1269   									l=0;
000156  49b8              LDR      r1,|L10.1080|
000158  6008              STR      r0,[r1,#0]  ; l
00015a  e032              B        |L10.450|
                  |L10.348|
;;;1270   														
;;;1271   																	
;;;1272   								}
;;;1273   								else if(	 x>=185 && x<=295 
00015c  9813              LDR      r0,[sp,#0x4c]
00015e  28b9              CMP      r0,#0xb9
000160  db16              BLT      |L10.400|
000162  9813              LDR      r0,[sp,#0x4c]
000164  f5b07f94          CMP      r0,#0x128
000168  da12              BGE      |L10.400|
;;;1274   									&& y>15 && y<= Sprite_16BPP_565_pie.SizeY +15)
00016a  9812              LDR      r0,[sp,#0x48]
00016c  280f              CMP      r0,#0xf
00016e  dd0f              BLE      |L10.400|
000170  48a2              LDR      r0,|L10.1020|
000172  8940              LDRH     r0,[r0,#0xa]  ; Sprite_16BPP_565_pie
000174  300f              ADDS     r0,r0,#0xf
000176  9912              LDR      r1,[sp,#0x48]
000178  4288              CMP      r0,r1
00017a  db09              BLT      |L10.400|
;;;1275   								{
;;;1276   										//Store the Value
;;;1277   											
;;;1278   									pC=0;
00017c  2000              MOVS     r0,#0
00017e  49ac              LDR      r1,|L10.1072|
000180  6008              STR      r0,[r1,#0]  ; pC
;;;1279   									s=1;
000182  2001              MOVS     r0,#1
000184  49ab              LDR      r1,|L10.1076|
000186  6008              STR      r0,[r1,#0]  ; s
;;;1280   									l=0;
000188  2000              MOVS     r0,#0
00018a  49ab              LDR      r1,|L10.1080|
00018c  6008              STR      r0,[r1,#0]  ; l
00018e  e018              B        |L10.450|
                  |L10.400|
;;;1281   									
;;;1282   											
;;;1283   											
;;;1284   								
;;;1285   									
;;;1286   									
;;;1287   								}
;;;1288   								else if(	 x>=335 && x<=450 
000190  9813              LDR      r0,[sp,#0x4c]
000192  f5b07fa7          CMP      r0,#0x14e
000196  dd14              BLE      |L10.450|
000198  9813              LDR      r0,[sp,#0x4c]
00019a  f5b07fe1          CMP      r0,#0x1c2
00019e  dc10              BGT      |L10.450|
;;;1289   									&& y>15 && y<= Sprite_16BPP_565_pie.SizeY +15)
0001a0  9812              LDR      r0,[sp,#0x48]
0001a2  280f              CMP      r0,#0xf
0001a4  dd0d              BLE      |L10.450|
0001a6  4895              LDR      r0,|L10.1020|
0001a8  8940              LDRH     r0,[r0,#0xa]  ; Sprite_16BPP_565_pie
0001aa  300f              ADDS     r0,r0,#0xf
0001ac  9912              LDR      r1,[sp,#0x48]
0001ae  4288              CMP      r0,r1
0001b0  db07              BLT      |L10.450|
;;;1290   								{
;;;1291   										//Store the Value
;;;1292   												
;;;1293   									//	MonkeySliderPosition = x;
;;;1294   									pC=0;
0001b2  2000              MOVS     r0,#0
0001b4  499e              LDR      r1,|L10.1072|
0001b6  6008              STR      r0,[r1,#0]  ; pC
;;;1295   									s=0;
0001b8  499e              LDR      r1,|L10.1076|
0001ba  6008              STR      r0,[r1,#0]  ; s
;;;1296   									l=1;
0001bc  2001              MOVS     r0,#1
0001be  499e              LDR      r1,|L10.1080|
0001c0  6008              STR      r0,[r1,#0]  ; l
                  |L10.450|
;;;1297   								}
;;;1298               }
;;;1299   						
;;;1300   						
;;;1301           }
;;;1302   			
;;;1303   				if(NextBufferReady == 1)
0001c2  489e              LDR      r0,|L10.1084|
0001c4  6800              LDR      r0,[r0,#0]  ; NextBufferReady
0001c6  2801              CMP      r0,#1
0001c8  d17d              BNE      |L10.710|
;;;1304   			{
;;;1305   				 arm_rfft_fast_f32(&MyFFT,
0001ca  2300              MOVS     r3,#0
0001cc  4a9c              LDR      r2,|L10.1088|
0001ce  489d              LDR      r0,|L10.1092|
0001d0  6801              LDR      r1,[r0,#0]  ; RightBuffer
0001d2  4888              LDR      r0,|L10.1012|
0001d4  f7fffffe          BL       arm_rfft_fast_f32
;;;1306   													  (float *)RightBuffer,
;;;1307   													  FFT_RawDataOut,0);
;;;1308   														
;;;1309   				 arm_cmplx_mag_squared_f32(FFT_RawDataOut,
0001d8  2280              MOVS     r2,#0x80
0001da  499b              LDR      r1,|L10.1096|
0001dc  4898              LDR      r0,|L10.1088|
0001de  f7fffffe          BL       arm_cmplx_mag_squared_f32
;;;1310   																	 FFT_PowerSpectrum,
;;;1311   																	 BUFFER_SIZE/2);
;;;1312   			
;;;1313   				//eGFX_ImagePlane_Clear(&eGFX_BackBuffer);
;;;1314   				
;;;1315   				for(int i=0;i<80;i++)
0001e2  2000              MOVS     r0,#0
0001e4  e09e              B        |L10.804|
                  |L10.486|
;;;1316   				{
;;;1317   						
;;;1318   								
;;;1319   														if(i>=0 && i<=2)
0001e6  2800              CMP      r0,#0
0001e8  db2f              BLT      |L10.586|
0001ea  2802              CMP      r0,#2
0001ec  dc2d              BGT      |L10.586|
;;;1320   														{
;;;1321   															if(i==0)
0001ee  b978              CBNZ     r0,|L10.528|
;;;1322   															{
;;;1323   															maxAmpL = FFT_PowerSpectrum[0];
0001f0  4995              LDR      r1,|L10.1096|
0001f2  ed910a00          VLDR     s0,[r1,#0]
0001f6  eef08a40          VMOV.F32 s17,s0
;;;1324   															powerSumL += FFT_PowerSpectrum[i];
0001fa  eb010180          ADD      r1,r1,r0,LSL #2
0001fe  ed910a00          VLDR     s0,[r1,#0]
000202  4992              LDR      r1,|L10.1100|
000204  edd10a00          VLDR     s1,[r1,#0]
000208  ee300a20          VADD.F32 s0,s0,s1
00020c  ed810a00          VSTR     s0,[r1,#0]
                  |L10.528|
;;;1325   															}
;;;1326   															if(FFT_PowerSpectrum[i]>maxAmpL)
000210  498d              LDR      r1,|L10.1096|
000212  eb010180          ADD      r1,r1,r0,LSL #2
000216  ed910a00          VLDR     s0,[r1,#0]
00021a  eeb40ae8          VCMPE.F32 s0,s17
00021e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000222  dd12              BLE      |L10.586|
;;;1327   															{
;;;1328   																maxAmpL=FFT_PowerSpectrum[i];
000224  4988              LDR      r1,|L10.1096|
000226  eb010180          ADD      r1,r1,r0,LSL #2
00022a  ed910a00          VLDR     s0,[r1,#0]
00022e  eef08a40          VMOV.F32 s17,s0
;;;1329   																powerSumL += FFT_PowerSpectrum[i];
000232  4985              LDR      r1,|L10.1096|
000234  eb010180          ADD      r1,r1,r0,LSL #2
000238  ed910a00          VLDR     s0,[r1,#0]
00023c  4983              LDR      r1,|L10.1100|
00023e  edd10a00          VLDR     s1,[r1,#0]
000242  ee300a20          VADD.F32 s0,s0,s1
000246  ed810a00          VSTR     s0,[r1,#0]
                  |L10.586|
;;;1330   															}
;;;1331   														}
;;;1332   														if(i>2 && i<=25)
00024a  2802              CMP      r0,#2
00024c  dd33              BLE      |L10.694|
00024e  2819              CMP      r0,#0x19
000250  dc31              BGT      |L10.694|
;;;1333   														{
;;;1334   															if(i==3)
000252  2803              CMP      r0,#3
000254  d112              BNE      |L10.636|
;;;1335   															{
;;;1336   															maxAmpM = FFT_PowerSpectrum[i];
000256  497c              LDR      r1,|L10.1096|
000258  eb010180          ADD      r1,r1,r0,LSL #2
00025c  ed910a00          VLDR     s0,[r1,#0]
000260  eeb08a40          VMOV.F32 s16,s0
;;;1337   															
;;;1338   																powerSumM += FFT_PowerSpectrum[i];
000264  4978              LDR      r1,|L10.1096|
000266  eb010180          ADD      r1,r1,r0,LSL #2
00026a  ed910a00          VLDR     s0,[r1,#0]
00026e  4978              LDR      r1,|L10.1104|
000270  edd10a00          VLDR     s1,[r1,#0]
000274  ee300a20          VADD.F32 s0,s0,s1
000278  ed810a00          VSTR     s0,[r1,#0]
                  |L10.636|
;;;1339   															}
;;;1340   															if(FFT_PowerSpectrum[i]>maxAmpM)
00027c  4972              LDR      r1,|L10.1096|
00027e  eb010180          ADD      r1,r1,r0,LSL #2
000282  ed910a00          VLDR     s0,[r1,#0]
000286  eeb40ac8          VCMPE.F32 s0,s16
00028a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00028e  dd06              BLE      |L10.670|
;;;1341   															{
;;;1342   																maxAmpM=FFT_PowerSpectrum[i];
000290  496d              LDR      r1,|L10.1096|
000292  eb010180          ADD      r1,r1,r0,LSL #2
000296  ed910a00          VLDR     s0,[r1,#0]
00029a  eeb08a40          VMOV.F32 s16,s0
                  |L10.670|
;;;1343   																
;;;1344   															}
;;;1345   															powerSumM += FFT_PowerSpectrum[i];
00029e  496a              LDR      r1,|L10.1096|
0002a0  eb010180          ADD      r1,r1,r0,LSL #2
0002a4  ed910a00          VLDR     s0,[r1,#0]
0002a8  4969              LDR      r1,|L10.1104|
0002aa  edd10a00          VLDR     s1,[r1,#0]
0002ae  ee300a20          VADD.F32 s0,s0,s1
0002b2  ed810a00          VSTR     s0,[r1,#0]
                  |L10.694|
;;;1346   														}
;;;1347   														if(i>25)
0002b6  2819              CMP      r0,#0x19
0002b8  dd33              BLE      |L10.802|
;;;1348   														{
;;;1349   															if(i==26)
0002ba  281a              CMP      r0,#0x1a
0002bc  d114              BNE      |L10.744|
;;;1350   															{
;;;1351   															maxAmpH = FFT_PowerSpectrum[i];
0002be  4962              LDR      r1,|L10.1096|
0002c0  eb010180          ADD      r1,r1,r0,LSL #2
0002c4  e000              B        |L10.712|
                  |L10.710|
0002c6  e06c              B        |L10.930|
                  |L10.712|
0002c8  ed910a00          VLDR     s0,[r1,#0]
0002cc  eeb09a40          VMOV.F32 s18,s0
;;;1352   																powerSumH += FFT_PowerSpectrum[i];
0002d0  495d              LDR      r1,|L10.1096|
0002d2  eb010180          ADD      r1,r1,r0,LSL #2
0002d6  ed910a00          VLDR     s0,[r1,#0]
0002da  495e              LDR      r1,|L10.1108|
0002dc  edd10a00          VLDR     s1,[r1,#0]
0002e0  ee300a20          VADD.F32 s0,s0,s1
0002e4  ed810a00          VSTR     s0,[r1,#0]
                  |L10.744|
;;;1353   															}
;;;1354   															if(FFT_PowerSpectrum[i]>maxAmpH)
0002e8  4957              LDR      r1,|L10.1096|
0002ea  eb010180          ADD      r1,r1,r0,LSL #2
0002ee  ed910a00          VLDR     s0,[r1,#0]
0002f2  eeb40ac9          VCMPE.F32 s0,s18
0002f6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0002fa  dd12              BLE      |L10.802|
;;;1355   															{
;;;1356   																maxAmpH=FFT_PowerSpectrum[i];
0002fc  4952              LDR      r1,|L10.1096|
0002fe  eb010180          ADD      r1,r1,r0,LSL #2
000302  ed910a00          VLDR     s0,[r1,#0]
000306  eeb09a40          VMOV.F32 s18,s0
;;;1357   																powerSumH += FFT_PowerSpectrum[i];
00030a  494f              LDR      r1,|L10.1096|
00030c  eb010180          ADD      r1,r1,r0,LSL #2
000310  ed910a00          VLDR     s0,[r1,#0]
000314  494f              LDR      r1,|L10.1108|
000316  edd10a00          VLDR     s1,[r1,#0]
00031a  ee300a20          VADD.F32 s0,s0,s1
00031e  ed810a00          VSTR     s0,[r1,#0]
                  |L10.802|
000322  1c40              ADDS     r0,r0,#1              ;1315
                  |L10.804|
000324  2850              CMP      r0,#0x50              ;1315
000326  f6ffaf5e          BLT      |L10.486|
;;;1358   															}
;;;1359   														}
;;;1360   												
;;;1361   				}			
;;;1362   				
;;;1363   				
;;;1364   							
;;;1365   			if(sumIt ==50)
00032a  484b              LDR      r0,|L10.1112|
00032c  6800              LDR      r0,[r0,#0]  ; sumIt
00032e  2832              CMP      r0,#0x32
000330  d12f              BNE      |L10.914|
;;;1366   				{					
;;;1367   					powerAvgM = powerSumM/1100;
000332  4847              LDR      r0,|L10.1104|
000334  ed900a00          VLDR     s0,[r0,#0]
000338  eddf0a48          VLDR     s1,|L10.1116|
00033c  ee801a20          VDIV.F32 s2,s0,s1
000340  4847              LDR      r0,|L10.1120|
000342  ed801a00          VSTR     s2,[r0,#0]
;;;1368   					powerAvgH = powerSumH/3200;
000346  4843              LDR      r0,|L10.1108|
000348  ed900a00          VLDR     s0,[r0,#0]
00034c  eddf0a45          VLDR     s1,|L10.1124|
000350  ee801a20          VDIV.F32 s2,s0,s1
000354  4844              LDR      r0,|L10.1128|
000356  ed801a00          VSTR     s2,[r0,#0]
;;;1369   					powerAvgL = powerSumL/150;
00035a  483c              LDR      r0,|L10.1100|
00035c  ed900a00          VLDR     s0,[r0,#0]
000360  eddf0a42          VLDR     s1,|L10.1132|
000364  ee801a20          VDIV.F32 s2,s0,s1
000368  4841              LDR      r0,|L10.1136|
00036a  ed801a00          VSTR     s2,[r0,#0]
;;;1370   					//powerAvgH = powerSumH/900;
;;;1371   					powerSumL=0;
00036e  ed9f0a41          VLDR     s0,|L10.1140|
000372  4836              LDR      r0,|L10.1100|
000374  ed800a00          VSTR     s0,[r0,#0]
;;;1372   					powerSumM=0;
000378  ed9f0a3e          VLDR     s0,|L10.1140|
00037c  4834              LDR      r0,|L10.1104|
00037e  ed800a00          VSTR     s0,[r0,#0]
;;;1373   					powerSumH=0;
000382  ed9f0a3c          VLDR     s0,|L10.1140|
000386  4833              LDR      r0,|L10.1108|
000388  ed800a00          VSTR     s0,[r0,#0]
;;;1374   					sumIt=1;
00038c  2001              MOVS     r0,#1
00038e  4932              LDR      r1,|L10.1112|
000390  6008              STR      r0,[r1,#0]  ; sumIt
                  |L10.914|
;;;1375   				}
;;;1376   							
;;;1377   		sumIt++;
000392  4831              LDR      r0,|L10.1112|
000394  6800              LDR      r0,[r0,#0]  ; sumIt
000396  1c40              ADDS     r0,r0,#1
000398  492f              LDR      r1,|L10.1112|
00039a  6008              STR      r0,[r1,#0]  ; sumIt
;;;1378   														
;;;1379   				//eGFX_Dump(&eGFX_BackBuffer);
;;;1380   					
;;;1381   				NextBufferReady = 0;
00039c  2000              MOVS     r0,#0
00039e  4927              LDR      r1,|L10.1084|
0003a0  6008              STR      r0,[r1,#0]  ; NextBufferReady
                  |L10.930|
;;;1382   		}
;;;1383   		
;;;1384   		threshCompare(maxAmpL, maxAmpM, maxAmpH);
0003a2  eeb01a49          VMOV.F32 s2,s18
0003a6  eef00a48          VMOV.F32 s1,s16
0003aa  eeb00a68          VMOV.F32 s0,s17
0003ae  f7fffffe          BL       threshCompare
;;;1385   		if(pC==1)
0003b2  481f              LDR      r0,|L10.1072|
0003b4  6800              LDR      r0,[r0,#0]  ; pC
0003b6  2801              CMP      r0,#1
0003b8  d109              BNE      |L10.974|
;;;1386   		{
;;;1387   			pieChunks(bass,maxAmpM,powerAvgM);
0003ba  4829              LDR      r0,|L10.1120|
0003bc  edd00a00          VLDR     s1,[r0,#0]
0003c0  eeb00a48          VMOV.F32 s0,s16
0003c4  482c              LDR      r0,|L10.1144|
0003c6  6800              LDR      r0,[r0,#0]  ; bass
0003c8  f7fffffe          BL       pieChunks
0003cc  e065              B        |L10.1178|
                  |L10.974|
;;;1388   		}
;;;1389   		else if(s==1)
0003ce  4819              LDR      r0,|L10.1076|
0003d0  6800              LDR      r0,[r0,#0]  ; s
0003d2  2801              CMP      r0,#1
0003d4  d156              BNE      |L10.1156|
;;;1390   		{
;;;1391   			stopLight(bass,mid,high);
0003d6  4829              LDR      r0,|L10.1148|
0003d8  6802              LDR      r2,[r0,#0]  ; high
0003da  4829              LDR      r0,|L10.1152|
0003dc  6801              LDR      r1,[r0,#0]  ; mid
0003de  4826              LDR      r0,|L10.1144|
0003e0  6800              LDR      r0,[r0,#0]  ; bass
0003e2  f7fffffe          BL       stopLight
0003e6  e058              B        |L10.1178|
                  |L10.1000|
                          DCD      Array
                  |L10.1004|
                          DCD      ledArray
                  |L10.1008|
                          DCD      0x40088000
                  |L10.1012|
                          DCD      MyFFT
                  |L10.1016|
                          DCD      eGFX_BackBuffer
                  |L10.1020|
                          DCD      Sprite_16BPP_565_pie
                  |L10.1024|
                          DCD      Sprite_16BPP_565_stop
                  |L10.1028|
                          DCD      Sprite_16BPP_565_light
                  |L10.1032|
000408  70696543          DCB      "pieChunks",0
00040c  68756e6b
000410  7300    
000412  00                DCB      0
000413  00                DCB      0
                  |L10.1044|
                          DCD      OCR_A_Extended__20px__Bold__SingleBitPerPixelGridFit_1BPP
                  |L10.1048|
000418  73746f70          DCB      "stopLight",0
00041c  4c696768
000420  7400    
000422  00                DCB      0
000423  00                DCB      0
                  |L10.1060|
000424  6c696768          DCB      "lightning",0
000428  746e696e
00042c  6700    
00042e  00                DCB      0
00042f  00                DCB      0
                  |L10.1072|
                          DCD      ||pC||
                  |L10.1076|
                          DCD      s
                  |L10.1080|
                          DCD      l
                  |L10.1084|
                          DCD      NextBufferReady
                  |L10.1088|
                          DCD      FFT_RawDataOut
                  |L10.1092|
                          DCD      RightBuffer
                  |L10.1096|
                          DCD      FFT_PowerSpectrum
                  |L10.1100|
                          DCD      powerSumL
                  |L10.1104|
                          DCD      powerSumM
                  |L10.1108|
                          DCD      powerSumH
                  |L10.1112|
                          DCD      sumIt
                  |L10.1116|
00045c  44898000          DCFS     0x44898000 ; 1100
                  |L10.1120|
                          DCD      powerAvgM
                  |L10.1124|
000464  45480000          DCFS     0x45480000 ; 3200
                  |L10.1128|
                          DCD      powerAvgH
                  |L10.1132|
00046c  43160000          DCFS     0x43160000 ; 150
                  |L10.1136|
                          DCD      powerAvgL
                  |L10.1140|
000474  00000000          DCFS     0x00000000 ; 0
                  |L10.1144|
                          DCD      bass
                  |L10.1148|
                          DCD      high
                  |L10.1152|
                          DCD      mid
                  |L10.1156|
;;;1392   		}
;;;1393   		else if (l==1)
000484  4805              LDR      r0,|L10.1180|
000486  6800              LDR      r0,[r0,#0]  ; l
000488  2801              CMP      r0,#1
00048a  d106              BNE      |L10.1178|
;;;1394   		{
;;;1395   			lightning(maxAmpL, powerAvgL);
00048c  4804              LDR      r0,|L10.1184|
00048e  edd00a00          VLDR     s1,[r0,#0]
000492  eeb00a68          VMOV.F32 s0,s17
000496  f7fffffe          BL       lightning
                  |L10.1178|
00049a  e638              B        |L10.270|
;;;1396   		}
;;;1397   		
;;;1398   			//eGFX_Dump(&eGFX_BackBuffer);
;;;1399   	}
;;;1400   				
;;;1401   				
;;;1402   			
;;;1403   		}
;;;1404   
                          ENDP

                  |L10.1180|
                          DCD      l
                  |L10.1184|
                          DCD      powerAvgL

                          AREA ||i.pieChunks||, CODE, READONLY, ALIGN=2

                  pieChunks PROC
;;;453    
;;;454    void pieChunks(int bass, float maxAmpM, float powerAvgM){ // only for bass float maxAmpL, float maxAmpM
000000  b501              PUSH     {r0,lr}
000002  ed2d0b02          VPUSH    {d0}
000006  b085              SUB      sp,sp,#0x14
;;;455    	
;;;456    	if(bass == 2)
000008  9807              LDR      r0,[sp,#0x1c]
00000a  2802              CMP      r0,#2
00000c  d17e              BNE      |L11.268|
;;;457    		{
;;;458    			
;;;459    			setLeds(255,31,255,0,0);
00000e  2000              MOVS     r0,#0
000010  4603              MOV      r3,r0
000012  22ff              MOVS     r2,#0xff
000014  211f              MOVS     r1,#0x1f
000016  9000              STR      r0,[sp,#0]
000018  4610              MOV      r0,r2
00001a  f7fffffe          BL       setLeds
;;;460    			setLeds(248,31,255,0,0);
00001e  2000              MOVS     r0,#0
000020  4603              MOV      r3,r0
000022  22ff              MOVS     r2,#0xff
000024  211f              MOVS     r1,#0x1f
000026  9000              STR      r0,[sp,#0]
000028  20f8              MOVS     r0,#0xf8
00002a  f7fffffe          BL       setLeds
;;;461    			setLeds(236,31,255,0,0);
00002e  2000              MOVS     r0,#0
000030  4603              MOV      r3,r0
000032  22ff              MOVS     r2,#0xff
000034  211f              MOVS     r1,#0x1f
000036  9000              STR      r0,[sp,#0]
000038  20ec              MOVS     r0,#0xec
00003a  f7fffffe          BL       setLeds
;;;462    			setLeds(216,31,255,0,0);
00003e  2000              MOVS     r0,#0
000040  4603              MOV      r3,r0
000042  22ff              MOVS     r2,#0xff
000044  211f              MOVS     r1,#0x1f
000046  9000              STR      r0,[sp,#0]
000048  20d8              MOVS     r0,#0xd8
00004a  f7fffffe          BL       setLeds
;;;463    			setLeds(192,31,255,0,0);
00004e  2000              MOVS     r0,#0
000050  4603              MOV      r3,r0
000052  22ff              MOVS     r2,#0xff
000054  211f              MOVS     r1,#0x1f
000056  9000              STR      r0,[sp,#0]
000058  20c0              MOVS     r0,#0xc0
00005a  f7fffffe          BL       setLeds
;;;464    			setLeds(164,31,255,0,0);
00005e  2000              MOVS     r0,#0
000060  4603              MOV      r3,r0
000062  22ff              MOVS     r2,#0xff
000064  211f              MOVS     r1,#0x1f
000066  9000              STR      r0,[sp,#0]
000068  20a4              MOVS     r0,#0xa4
00006a  f7fffffe          BL       setLeds
;;;465    			setLeds(132,31,255,0,0);
00006e  2000              MOVS     r0,#0
000070  4603              MOV      r3,r0
000072  22ff              MOVS     r2,#0xff
000074  211f              MOVS     r1,#0x1f
000076  9000              STR      r0,[sp,#0]
000078  2084              MOVS     r0,#0x84
00007a  f7fffffe          BL       setLeds
;;;466    			setLeds(92,31,255,0,0);
00007e  2000              MOVS     r0,#0
000080  4603              MOV      r3,r0
000082  22ff              MOVS     r2,#0xff
000084  211f              MOVS     r1,#0x1f
000086  9000              STR      r0,[sp,#0]
000088  205c              MOVS     r0,#0x5c
00008a  f7fffffe          BL       setLeds
;;;467    			setLeds(48,31,255,0,0);
00008e  2000              MOVS     r0,#0
000090  4603              MOV      r3,r0
000092  22ff              MOVS     r2,#0xff
000094  211f              MOVS     r1,#0x1f
000096  9000              STR      r0,[sp,#0]
000098  2030              MOVS     r0,#0x30
00009a  f7fffffe          BL       setLeds
;;;468    			
;;;469    			
;;;470    			
;;;471    			
;;;472    			setLeds(239,31,255,0,0);
00009e  2000              MOVS     r0,#0
0000a0  4603              MOV      r3,r0
0000a2  22ff              MOVS     r2,#0xff
0000a4  211f              MOVS     r1,#0x1f
0000a6  9000              STR      r0,[sp,#0]
0000a8  20ef              MOVS     r0,#0xef
0000aa  f7fffffe          BL       setLeds
;;;473    			setLeds(221,31,255,0,0);
0000ae  2000              MOVS     r0,#0
0000b0  4603              MOV      r3,r0
0000b2  22ff              MOVS     r2,#0xff
0000b4  211f              MOVS     r1,#0x1f
0000b6  9000              STR      r0,[sp,#0]
0000b8  20dd              MOVS     r0,#0xdd
0000ba  f7fffffe          BL       setLeds
;;;474    			setLeds(198,31,255,0,0);
0000be  2000              MOVS     r0,#0
0000c0  4603              MOV      r3,r0
0000c2  22ff              MOVS     r2,#0xff
0000c4  211f              MOVS     r1,#0x1f
0000c6  9000              STR      r0,[sp,#0]
0000c8  20c6              MOVS     r0,#0xc6
0000ca  f7fffffe          BL       setLeds
;;;475    			setLeds(171,31,255,0,0);
0000ce  2000              MOVS     r0,#0
0000d0  4603              MOV      r3,r0
0000d2  22ff              MOVS     r2,#0xff
0000d4  211f              MOVS     r1,#0x1f
0000d6  9000              STR      r0,[sp,#0]
0000d8  20ab              MOVS     r0,#0xab
0000da  f7fffffe          BL       setLeds
;;;476    			setLeds(140,31,255,0,0);
0000de  2000              MOVS     r0,#0
0000e0  4603              MOV      r3,r0
0000e2  22ff              MOVS     r2,#0xff
0000e4  211f              MOVS     r1,#0x1f
0000e6  9000              STR      r0,[sp,#0]
0000e8  208c              MOVS     r0,#0x8c
0000ea  f7fffffe          BL       setLeds
;;;477    			setLeds(102,31,255,0,0);
0000ee  2000              MOVS     r0,#0
0000f0  4603              MOV      r3,r0
0000f2  22ff              MOVS     r2,#0xff
0000f4  211f              MOVS     r1,#0x1f
0000f6  9000              STR      r0,[sp,#0]
0000f8  2066              MOVS     r0,#0x66
0000fa  f7fffffe          BL       setLeds
;;;478    			setLeds(59,31,255,0,0);
0000fe  2000              MOVS     r0,#0
000100  4603              MOV      r3,r0
000102  22ff              MOVS     r2,#0xff
000104  211f              MOVS     r1,#0x1f
000106  9000              STR      r0,[sp,#0]
000108  203b              MOVS     r0,#0x3b
00010a  e000              B        |L11.270|
                  |L11.268|
00010c  e07a              B        |L11.516|
                  |L11.270|
00010e  f7fffffe          BL       setLeds
;;;479    		
;;;480    
;;;481    
;;;482    			setLeds(251,31,255,0,0);
000112  2000              MOVS     r0,#0
000114  4603              MOV      r3,r0
000116  22ff              MOVS     r2,#0xff
000118  211f              MOVS     r1,#0x1f
00011a  9000              STR      r0,[sp,#0]
00011c  20fb              MOVS     r0,#0xfb
00011e  f7fffffe          BL       setLeds
;;;483    			setLeds(242,31,255,0,0);
000122  2000              MOVS     r0,#0
000124  4603              MOV      r3,r0
000126  22ff              MOVS     r2,#0xff
000128  211f              MOVS     r1,#0x1f
00012a  9000              STR      r0,[sp,#0]
00012c  20f2              MOVS     r0,#0xf2
00012e  f7fffffe          BL       setLeds
;;;484    			setLeds(226,31,255,0,0);
000132  2000              MOVS     r0,#0
000134  4603              MOV      r3,r0
000136  22ff              MOVS     r2,#0xff
000138  211f              MOVS     r1,#0x1f
00013a  9000              STR      r0,[sp,#0]
00013c  20e2              MOVS     r0,#0xe2
00013e  f7fffffe          BL       setLeds
;;;485    			setLeds(204,31,255,0,0);
000142  2000              MOVS     r0,#0
000144  4603              MOV      r3,r0
000146  22ff              MOVS     r2,#0xff
000148  211f              MOVS     r1,#0x1f
00014a  9000              STR      r0,[sp,#0]
00014c  20cc              MOVS     r0,#0xcc
00014e  f7fffffe          BL       setLeds
;;;486    			setLeds(178,31,255,0,0);
000152  2000              MOVS     r0,#0
000154  4603              MOV      r3,r0
000156  22ff              MOVS     r2,#0xff
000158  211f              MOVS     r1,#0x1f
00015a  9000              STR      r0,[sp,#0]
00015c  20b2              MOVS     r0,#0xb2
00015e  f7fffffe          BL       setLeds
;;;487    			setLeds(148,31,255,0,0);
000162  2000              MOVS     r0,#0
000164  4603              MOV      r3,r0
000166  22ff              MOVS     r2,#0xff
000168  211f              MOVS     r1,#0x1f
00016a  9000              STR      r0,[sp,#0]
00016c  2094              MOVS     r0,#0x94
00016e  f7fffffe          BL       setLeds
;;;488    			setLeds(112,31,255,0,0);
000172  2000              MOVS     r0,#0
000174  4603              MOV      r3,r0
000176  22ff              MOVS     r2,#0xff
000178  211f              MOVS     r1,#0x1f
00017a  9000              STR      r0,[sp,#0]
00017c  2070              MOVS     r0,#0x70
00017e  f7fffffe          BL       setLeds
;;;489    			setLeds(70,31,255,0,0);
000182  2000              MOVS     r0,#0
000184  4603              MOV      r3,r0
000186  22ff              MOVS     r2,#0xff
000188  211f              MOVS     r1,#0x1f
00018a  9000              STR      r0,[sp,#0]
00018c  2046              MOVS     r0,#0x46
00018e  f7fffffe          BL       setLeds
;;;490    			
;;;491    			
;;;492    			
;;;493    			setLeds(245,31,255,0,0);
000192  2000              MOVS     r0,#0
000194  4603              MOV      r3,r0
000196  22ff              MOVS     r2,#0xff
000198  211f              MOVS     r1,#0x1f
00019a  9000              STR      r0,[sp,#0]
00019c  20f5              MOVS     r0,#0xf5
00019e  f7fffffe          BL       setLeds
;;;494    			setLeds(231,31,255,0,0);
0001a2  2000              MOVS     r0,#0
0001a4  4603              MOV      r3,r0
0001a6  22ff              MOVS     r2,#0xff
0001a8  211f              MOVS     r1,#0x1f
0001aa  9000              STR      r0,[sp,#0]
0001ac  20e7              MOVS     r0,#0xe7
0001ae  f7fffffe          BL       setLeds
;;;495    			setLeds(210,31,255,0,0);
0001b2  2000              MOVS     r0,#0
0001b4  4603              MOV      r3,r0
0001b6  22ff              MOVS     r2,#0xff
0001b8  211f              MOVS     r1,#0x1f
0001ba  9000              STR      r0,[sp,#0]
0001bc  20d2              MOVS     r0,#0xd2
0001be  f7fffffe          BL       setLeds
;;;496    			setLeds(185,31,255,0,0);
0001c2  2000              MOVS     r0,#0
0001c4  4603              MOV      r3,r0
0001c6  22ff              MOVS     r2,#0xff
0001c8  211f              MOVS     r1,#0x1f
0001ca  9000              STR      r0,[sp,#0]
0001cc  20b9              MOVS     r0,#0xb9
0001ce  f7fffffe          BL       setLeds
;;;497    			setLeds(156,31,255,0,0);
0001d2  2000              MOVS     r0,#0
0001d4  4603              MOV      r3,r0
0001d6  22ff              MOVS     r2,#0xff
0001d8  211f              MOVS     r1,#0x1f
0001da  9000              STR      r0,[sp,#0]
0001dc  209c              MOVS     r0,#0x9c
0001de  f7fffffe          BL       setLeds
;;;498    			setLeds(122,31,255,0,0);
0001e2  2000              MOVS     r0,#0
0001e4  4603              MOV      r3,r0
0001e6  22ff              MOVS     r2,#0xff
0001e8  211f              MOVS     r1,#0x1f
0001ea  9000              STR      r0,[sp,#0]
0001ec  207a              MOVS     r0,#0x7a
0001ee  f7fffffe          BL       setLeds
;;;499    			setLeds(81,31,255,0,0);
0001f2  2000              MOVS     r0,#0
0001f4  4603              MOV      r3,r0
0001f6  22ff              MOVS     r2,#0xff
0001f8  211f              MOVS     r1,#0x1f
0001fa  9000              STR      r0,[sp,#0]
0001fc  2051              MOVS     r0,#0x51
0001fe  f7fffffe          BL       setLeds
000202  e0f7              B        |L11.1012|
                  |L11.516|
;;;500    		
;;;501    		
;;;502    			
;;;503    			
;;;504    		}
;;;505    		else{
;;;506    			setLeds(255,0,0,0,0);
000204  2000              MOVS     r0,#0
000206  4603              MOV      r3,r0
000208  4602              MOV      r2,r0
00020a  4601              MOV      r1,r0
00020c  9000              STR      r0,[sp,#0]
00020e  20ff              MOVS     r0,#0xff
000210  f7fffffe          BL       setLeds
;;;507    			setLeds(248,0,0,0,0);
000214  2000              MOVS     r0,#0
000216  4603              MOV      r3,r0
000218  4602              MOV      r2,r0
00021a  4601              MOV      r1,r0
00021c  9000              STR      r0,[sp,#0]
00021e  20f8              MOVS     r0,#0xf8
000220  f7fffffe          BL       setLeds
;;;508    			setLeds(236,0,0,0,0);
000224  2000              MOVS     r0,#0
000226  4603              MOV      r3,r0
000228  4602              MOV      r2,r0
00022a  4601              MOV      r1,r0
00022c  9000              STR      r0,[sp,#0]
00022e  20ec              MOVS     r0,#0xec
000230  f7fffffe          BL       setLeds
;;;509    			setLeds(216,0,0,0,0);
000234  2000              MOVS     r0,#0
000236  4603              MOV      r3,r0
000238  4602              MOV      r2,r0
00023a  4601              MOV      r1,r0
00023c  9000              STR      r0,[sp,#0]
00023e  20d8              MOVS     r0,#0xd8
000240  f7fffffe          BL       setLeds
;;;510    			setLeds(192,0,0,0,0);
000244  2000              MOVS     r0,#0
000246  4603              MOV      r3,r0
000248  4602              MOV      r2,r0
00024a  4601              MOV      r1,r0
00024c  9000              STR      r0,[sp,#0]
00024e  20c0              MOVS     r0,#0xc0
000250  f7fffffe          BL       setLeds
;;;511    			setLeds(164,0,0,0,0);
000254  2000              MOVS     r0,#0
000256  4603              MOV      r3,r0
000258  4602              MOV      r2,r0
00025a  4601              MOV      r1,r0
00025c  9000              STR      r0,[sp,#0]
00025e  20a4              MOVS     r0,#0xa4
000260  f7fffffe          BL       setLeds
;;;512    			setLeds(132,0,0,0,0);
000264  2000              MOVS     r0,#0
000266  4603              MOV      r3,r0
000268  4602              MOV      r2,r0
00026a  4601              MOV      r1,r0
00026c  9000              STR      r0,[sp,#0]
00026e  2084              MOVS     r0,#0x84
000270  f7fffffe          BL       setLeds
;;;513    			setLeds(92,0,0,0,0);
000274  2000              MOVS     r0,#0
000276  4603              MOV      r3,r0
000278  4602              MOV      r2,r0
00027a  4601              MOV      r1,r0
00027c  9000              STR      r0,[sp,#0]
00027e  205c              MOVS     r0,#0x5c
000280  f7fffffe          BL       setLeds
;;;514    			setLeds(48,0,0,0,0);
000284  2000              MOVS     r0,#0
000286  4603              MOV      r3,r0
000288  4602              MOV      r2,r0
00028a  4601              MOV      r1,r0
00028c  9000              STR      r0,[sp,#0]
00028e  2030              MOVS     r0,#0x30
000290  f7fffffe          BL       setLeds
;;;515    			
;;;516    			
;;;517    			setLeds(239,0,0,0,0);
000294  2000              MOVS     r0,#0
000296  4603              MOV      r3,r0
000298  4602              MOV      r2,r0
00029a  4601              MOV      r1,r0
00029c  9000              STR      r0,[sp,#0]
00029e  20ef              MOVS     r0,#0xef
0002a0  f7fffffe          BL       setLeds
;;;518    			setLeds(221,0,0,0,0);
0002a4  2000              MOVS     r0,#0
0002a6  4603              MOV      r3,r0
0002a8  4602              MOV      r2,r0
0002aa  4601              MOV      r1,r0
0002ac  9000              STR      r0,[sp,#0]
0002ae  20dd              MOVS     r0,#0xdd
0002b0  f7fffffe          BL       setLeds
;;;519    			setLeds(198,0,0,0,0);
0002b4  2000              MOVS     r0,#0
0002b6  4603              MOV      r3,r0
0002b8  4602              MOV      r2,r0
0002ba  4601              MOV      r1,r0
0002bc  9000              STR      r0,[sp,#0]
0002be  20c6              MOVS     r0,#0xc6
0002c0  f7fffffe          BL       setLeds
;;;520    			setLeds(171,0,0,0,0);
0002c4  2000              MOVS     r0,#0
0002c6  4603              MOV      r3,r0
0002c8  4602              MOV      r2,r0
0002ca  4601              MOV      r1,r0
0002cc  9000              STR      r0,[sp,#0]
0002ce  20ab              MOVS     r0,#0xab
0002d0  f7fffffe          BL       setLeds
;;;521    			setLeds(140,0,0,0,0);
0002d4  2000              MOVS     r0,#0
0002d6  4603              MOV      r3,r0
0002d8  4602              MOV      r2,r0
0002da  4601              MOV      r1,r0
0002dc  9000              STR      r0,[sp,#0]
0002de  208c              MOVS     r0,#0x8c
0002e0  f7fffffe          BL       setLeds
;;;522    			setLeds(102,0,0,0,0);
0002e4  2000              MOVS     r0,#0
0002e6  4603              MOV      r3,r0
0002e8  4602              MOV      r2,r0
0002ea  4601              MOV      r1,r0
0002ec  9000              STR      r0,[sp,#0]
0002ee  2066              MOVS     r0,#0x66
0002f0  f7fffffe          BL       setLeds
;;;523    			setLeds(59,0,0,0,0);
0002f4  2000              MOVS     r0,#0
0002f6  4603              MOV      r3,r0
0002f8  4602              MOV      r2,r0
0002fa  4601              MOV      r1,r0
0002fc  9000              STR      r0,[sp,#0]
0002fe  203b              MOVS     r0,#0x3b
000300  f7fffffe          BL       setLeds
;;;524    		
;;;525    
;;;526    			setLeds(251,0,0,0,0);
000304  2000              MOVS     r0,#0
000306  4603              MOV      r3,r0
000308  4602              MOV      r2,r0
00030a  4601              MOV      r1,r0
00030c  9000              STR      r0,[sp,#0]
00030e  20fb              MOVS     r0,#0xfb
000310  f7fffffe          BL       setLeds
;;;527    			setLeds(242,0,0,0,0);
000314  2000              MOVS     r0,#0
000316  4603              MOV      r3,r0
000318  4602              MOV      r2,r0
00031a  4601              MOV      r1,r0
00031c  9000              STR      r0,[sp,#0]
00031e  20f2              MOVS     r0,#0xf2
000320  f7fffffe          BL       setLeds
;;;528    			setLeds(226,0,0,0,0);
000324  2000              MOVS     r0,#0
000326  4603              MOV      r3,r0
000328  4602              MOV      r2,r0
00032a  4601              MOV      r1,r0
00032c  9000              STR      r0,[sp,#0]
00032e  20e2              MOVS     r0,#0xe2
000330  f7fffffe          BL       setLeds
;;;529    			setLeds(204,0,0,0,0);
000334  2000              MOVS     r0,#0
000336  4603              MOV      r3,r0
000338  4602              MOV      r2,r0
00033a  4601              MOV      r1,r0
00033c  9000              STR      r0,[sp,#0]
00033e  20cc              MOVS     r0,#0xcc
000340  f7fffffe          BL       setLeds
;;;530    			setLeds(178,0,0,0,0);
000344  2000              MOVS     r0,#0
000346  4603              MOV      r3,r0
000348  4602              MOV      r2,r0
00034a  4601              MOV      r1,r0
00034c  9000              STR      r0,[sp,#0]
00034e  20b2              MOVS     r0,#0xb2
000350  f7fffffe          BL       setLeds
;;;531    			setLeds(148,0,0,0,0);
000354  2000              MOVS     r0,#0
000356  4603              MOV      r3,r0
000358  4602              MOV      r2,r0
00035a  4601              MOV      r1,r0
00035c  9000              STR      r0,[sp,#0]
00035e  2094              MOVS     r0,#0x94
000360  f7fffffe          BL       setLeds
;;;532    			setLeds(112,0,0,0,0);
000364  2000              MOVS     r0,#0
000366  4603              MOV      r3,r0
000368  4602              MOV      r2,r0
00036a  4601              MOV      r1,r0
00036c  9000              STR      r0,[sp,#0]
00036e  2070              MOVS     r0,#0x70
000370  f7fffffe          BL       setLeds
;;;533    			setLeds(70,0,0,0,0);
000374  2000              MOVS     r0,#0
000376  4603              MOV      r3,r0
000378  4602              MOV      r2,r0
00037a  4601              MOV      r1,r0
00037c  9000              STR      r0,[sp,#0]
00037e  2046              MOVS     r0,#0x46
000380  f7fffffe          BL       setLeds
;;;534    			
;;;535    			
;;;536    			setLeds(245,0,0,0,0);
000384  2000              MOVS     r0,#0
000386  4603              MOV      r3,r0
000388  4602              MOV      r2,r0
00038a  4601              MOV      r1,r0
00038c  9000              STR      r0,[sp,#0]
00038e  20f5              MOVS     r0,#0xf5
000390  f7fffffe          BL       setLeds
;;;537    			setLeds(231,0,0,0,0);
000394  2000              MOVS     r0,#0
000396  4603              MOV      r3,r0
000398  4602              MOV      r2,r0
00039a  4601              MOV      r1,r0
00039c  9000              STR      r0,[sp,#0]
00039e  20e7              MOVS     r0,#0xe7
0003a0  f7fffffe          BL       setLeds
;;;538    			setLeds(210,0,0,0,0);
0003a4  2000              MOVS     r0,#0
0003a6  4603              MOV      r3,r0
0003a8  4602              MOV      r2,r0
0003aa  4601              MOV      r1,r0
0003ac  9000              STR      r0,[sp,#0]
0003ae  20d2              MOVS     r0,#0xd2
0003b0  f7fffffe          BL       setLeds
;;;539    			setLeds(185,0,0,0,0);
0003b4  2000              MOVS     r0,#0
0003b6  4603              MOV      r3,r0
0003b8  4602              MOV      r2,r0
0003ba  4601              MOV      r1,r0
0003bc  9000              STR      r0,[sp,#0]
0003be  20b9              MOVS     r0,#0xb9
0003c0  f7fffffe          BL       setLeds
;;;540    			setLeds(156,0,0,0,0);
0003c4  2000              MOVS     r0,#0
0003c6  4603              MOV      r3,r0
0003c8  4602              MOV      r2,r0
0003ca  4601              MOV      r1,r0
0003cc  9000              STR      r0,[sp,#0]
0003ce  209c              MOVS     r0,#0x9c
0003d0  f7fffffe          BL       setLeds
;;;541    			setLeds(122,0,0,0,0);
0003d4  2000              MOVS     r0,#0
0003d6  4603              MOV      r3,r0
0003d8  4602              MOV      r2,r0
0003da  4601              MOV      r1,r0
0003dc  9000              STR      r0,[sp,#0]
0003de  207a              MOVS     r0,#0x7a
0003e0  f7fffffe          BL       setLeds
;;;542    			setLeds(81,0,0,0,0);
0003e4  2000              MOVS     r0,#0
0003e6  4603              MOV      r3,r0
0003e8  4602              MOV      r2,r0
0003ea  4601              MOV      r1,r0
0003ec  9000              STR      r0,[sp,#0]
0003ee  2051              MOVS     r0,#0x51
0003f0  f7fffffe          BL       setLeds
                  |L11.1012|
;;;543    		}
;;;544    		
;;;545    if(maxAmpM >1 )
0003f4  ed9d0a05          VLDR     s0,[sp,#0x14]
0003f8  eef70a00          VMOV.F32 s1,#1.00000000
0003fc  eeb40ae0          VCMPE.F32 s0,s1
000400  eef1fa10          VMRS     APSR_nzcv,FPSCR
000404  dd7e              BLE      |L11.1284|
;;;546    {
;;;547    	if(maxAmpM > powerAvgM*25)
000406  ed9d0a06          VLDR     s0,[sp,#0x18]
00040a  eef30a09          VMOV.F32 s1,#25.00000000
00040e  ee600a20          VMUL.F32 s1,s0,s1
000412  ed9d0a05          VLDR     s0,[sp,#0x14]
000416  eef40ac0          VCMPE.F32 s1,s0
00041a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00041e  d273              BCS      |L11.1288|
;;;548    	{
;;;549    		for(int i=48;i<=256;i++)
000420  2030              MOVS     r0,#0x30
000422  9004              STR      r0,[sp,#0x10]
000424  e069              B        |L11.1274|
                  |L11.1062|
;;;550    		{
;;;551    			if(crossLeds[i]==0 )
000426  49fc              LDR      r1,|L11.2072|
000428  9804              LDR      r0,[sp,#0x10]
00042a  f8510020          LDR      r0,[r1,r0,LSL #2]
00042e  2800              CMP      r0,#0
000430  d160              BNE      |L11.1268|
;;;552    			{
;;;553    				if(i>=48 && i<93)
000432  9804              LDR      r0,[sp,#0x10]
000434  2830              CMP      r0,#0x30
000436  db0d              BLT      |L11.1108|
000438  9804              LDR      r0,[sp,#0x10]
00043a  285d              CMP      r0,#0x5d
00043c  da0a              BGE      |L11.1108|
;;;554    				{
;;;555    					setLeds(i,31,7,248,0); // change to b =7 , G = 248
00043e  2000              MOVS     r0,#0
000440  9000              STR      r0,[sp,#0]
000442  9804              LDR      r0,[sp,#0x10]
000444  b280              UXTH     r0,r0
000446  23f8              MOVS     r3,#0xf8
000448  2207              MOVS     r2,#7
00044a  211f              MOVS     r1,#0x1f
00044c  9003              STR      r0,[sp,#0xc]
00044e  f7fffffe          BL       setLeds
000452  e04f              B        |L11.1268|
                  |L11.1108|
;;;556    				}
;;;557    				else if(i<132)
000454  9804              LDR      r0,[sp,#0x10]
000456  2884              CMP      r0,#0x84
000458  da0a              BGE      |L11.1136|
;;;558    				{
;;;559    					setLeds(i,31,7,248,0);
00045a  2000              MOVS     r0,#0
00045c  9000              STR      r0,[sp,#0]
00045e  9804              LDR      r0,[sp,#0x10]
000460  b280              UXTH     r0,r0
000462  23f8              MOVS     r3,#0xf8
000464  2207              MOVS     r2,#7
000466  211f              MOVS     r1,#0x1f
000468  9003              STR      r0,[sp,#0xc]
00046a  f7fffffe          BL       setLeds
00046e  e041              B        |L11.1268|
                  |L11.1136|
;;;560    				}
;;;561    				else if(i<164)
000470  9804              LDR      r0,[sp,#0x10]
000472  28a4              CMP      r0,#0xa4
000474  da0a              BGE      |L11.1164|
;;;562    				{
;;;563    					setLeds(i,31,255,0,247);
000476  20f7              MOVS     r0,#0xf7
000478  9000              STR      r0,[sp,#0]
00047a  9804              LDR      r0,[sp,#0x10]
00047c  b280              UXTH     r0,r0
00047e  2300              MOVS     r3,#0
000480  22ff              MOVS     r2,#0xff
000482  211f              MOVS     r1,#0x1f
000484  9003              STR      r0,[sp,#0xc]
000486  f7fffffe          BL       setLeds
00048a  e033              B        |L11.1268|
                  |L11.1164|
;;;564    				}
;;;565    				else if(i<192)
00048c  9804              LDR      r0,[sp,#0x10]
00048e  28c0              CMP      r0,#0xc0
000490  da0a              BGE      |L11.1192|
;;;566    				{
;;;567    					setLeds(i,31,255,0,247); //orange 
000492  20f7              MOVS     r0,#0xf7
000494  9000              STR      r0,[sp,#0]
000496  9804              LDR      r0,[sp,#0x10]
000498  b280              UXTH     r0,r0
00049a  2300              MOVS     r3,#0
00049c  22ff              MOVS     r2,#0xff
00049e  211f              MOVS     r1,#0x1f
0004a0  9003              STR      r0,[sp,#0xc]
0004a2  f7fffffe          BL       setLeds
0004a6  e025              B        |L11.1268|
                  |L11.1192|
;;;568    				}
;;;569    				else if(i<216)
0004a8  9804              LDR      r0,[sp,#0x10]
0004aa  28d8              CMP      r0,#0xd8
0004ac  da0a              BGE      |L11.1220|
;;;570    				{
;;;571    					setLeds(i,31,255,0,247);
0004ae  20f7              MOVS     r0,#0xf7
0004b0  9000              STR      r0,[sp,#0]
0004b2  9804              LDR      r0,[sp,#0x10]
0004b4  b280              UXTH     r0,r0
0004b6  2300              MOVS     r3,#0
0004b8  22ff              MOVS     r2,#0xff
0004ba  211f              MOVS     r1,#0x1f
0004bc  9003              STR      r0,[sp,#0xc]
0004be  f7fffffe          BL       setLeds
0004c2  e017              B        |L11.1268|
                  |L11.1220|
;;;572    				}
;;;573    				else if(i<236)
0004c4  9804              LDR      r0,[sp,#0x10]
0004c6  28ec              CMP      r0,#0xec
0004c8  da0a              BGE      |L11.1248|
;;;574    				{
;;;575    					setLeds(i,31,200,10,0);
0004ca  2000              MOVS     r0,#0
0004cc  9000              STR      r0,[sp,#0]
0004ce  9804              LDR      r0,[sp,#0x10]
0004d0  b280              UXTH     r0,r0
0004d2  230a              MOVS     r3,#0xa
0004d4  22c8              MOVS     r2,#0xc8
0004d6  211f              MOVS     r1,#0x1f
0004d8  9003              STR      r0,[sp,#0xc]
0004da  f7fffffe          BL       setLeds
0004de  e009              B        |L11.1268|
                  |L11.1248|
;;;576    				}
;;;577    				else{
;;;578    					
;;;579    					setLeds(i,31,200,10,0);
0004e0  2000              MOVS     r0,#0
0004e2  9000              STR      r0,[sp,#0]
0004e4  9804              LDR      r0,[sp,#0x10]
0004e6  b280              UXTH     r0,r0
0004e8  230a              MOVS     r3,#0xa
0004ea  22c8              MOVS     r2,#0xc8
0004ec  211f              MOVS     r1,#0x1f
0004ee  9003              STR      r0,[sp,#0xc]
0004f0  f7fffffe          BL       setLeds
                  |L11.1268|
0004f4  9804              LDR      r0,[sp,#0x10]         ;549
0004f6  1c40              ADDS     r0,r0,#1              ;549
0004f8  9004              STR      r0,[sp,#0x10]         ;549
                  |L11.1274|
0004fa  9804              LDR      r0,[sp,#0x10]         ;549
0004fc  f5b07f80          CMP      r0,#0x100             ;549
000500  dd91              BLE      |L11.1062|
000502  e251              B        |L11.2472|
                  |L11.1284|
000504  e24e              B        |L11.2468|
000506  e7ff              B        |L11.1288|
                  |L11.1288|
;;;580    				}
;;;581    			}
;;;582    			else
;;;583    			{
;;;584    			}
;;;585    		}
;;;586    	}
;;;587    	else if(maxAmpM > powerAvgM*20)
000508  ed9d0a06          VLDR     s0,[sp,#0x18]
00050c  eef30a04          VMOV.F32 s1,#20.00000000
000510  ee600a20          VMUL.F32 s1,s0,s1
000514  ed9d0a05          VLDR     s0,[sp,#0x14]
000518  eef40ac0          VCMPE.F32 s1,s0
00051c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000520  d272              BCS      |L11.1544|
;;;588    	{
;;;589    		for(int i=48;i<=256;i++)
000522  2030              MOVS     r0,#0x30
000524  9004              STR      r0,[sp,#0x10]
000526  e069              B        |L11.1532|
                  |L11.1320|
;;;590    		{
;;;591    			if(crossLeds[i]==0 )
000528  49bb              LDR      r1,|L11.2072|
00052a  9804              LDR      r0,[sp,#0x10]
00052c  f8510020          LDR      r0,[r1,r0,LSL #2]
000530  2800              CMP      r0,#0
000532  d160              BNE      |L11.1526|
;;;592    			{
;;;593    				if(i>=48 && i<93)
000534  9804              LDR      r0,[sp,#0x10]
000536  2830              CMP      r0,#0x30
000538  db0d              BLT      |L11.1366|
00053a  9804              LDR      r0,[sp,#0x10]
00053c  285d              CMP      r0,#0x5d
00053e  da0a              BGE      |L11.1366|
;;;594    				{
;;;595    					setLeds(i,0,0,0,0);
000540  2000              MOVS     r0,#0
000542  9000              STR      r0,[sp,#0]
000544  9804              LDR      r0,[sp,#0x10]
000546  b280              UXTH     r0,r0
000548  2300              MOVS     r3,#0
00054a  461a              MOV      r2,r3
00054c  4619              MOV      r1,r3
00054e  9003              STR      r0,[sp,#0xc]
000550  f7fffffe          BL       setLeds
000554  e04f              B        |L11.1526|
                  |L11.1366|
;;;596    				}
;;;597    				else if(i<132)
000556  9804              LDR      r0,[sp,#0x10]
000558  2884              CMP      r0,#0x84
00055a  da0a              BGE      |L11.1394|
;;;598    				{
;;;599    					setLeds(i,31,7,248,0);
00055c  2000              MOVS     r0,#0
00055e  9000              STR      r0,[sp,#0]
000560  9804              LDR      r0,[sp,#0x10]
000562  b280              UXTH     r0,r0
000564  23f8              MOVS     r3,#0xf8
000566  2207              MOVS     r2,#7
000568  211f              MOVS     r1,#0x1f
00056a  9003              STR      r0,[sp,#0xc]
00056c  f7fffffe          BL       setLeds
000570  e041              B        |L11.1526|
                  |L11.1394|
;;;600    				}
;;;601    				else if(i<164)
000572  9804              LDR      r0,[sp,#0x10]
000574  28a4              CMP      r0,#0xa4
000576  da0a              BGE      |L11.1422|
;;;602    				{
;;;603    					setLeds(i,31,255,0,247);
000578  20f7              MOVS     r0,#0xf7
00057a  9000              STR      r0,[sp,#0]
00057c  9804              LDR      r0,[sp,#0x10]
00057e  b280              UXTH     r0,r0
000580  2300              MOVS     r3,#0
000582  22ff              MOVS     r2,#0xff
000584  211f              MOVS     r1,#0x1f
000586  9003              STR      r0,[sp,#0xc]
000588  f7fffffe          BL       setLeds
00058c  e033              B        |L11.1526|
                  |L11.1422|
;;;604    				}
;;;605    				else if(i<192)
00058e  9804              LDR      r0,[sp,#0x10]
000590  28c0              CMP      r0,#0xc0
000592  da0a              BGE      |L11.1450|
;;;606    				{
;;;607    					setLeds(i,31,255,0,247);
000594  20f7              MOVS     r0,#0xf7
000596  9000              STR      r0,[sp,#0]
000598  9804              LDR      r0,[sp,#0x10]
00059a  b280              UXTH     r0,r0
00059c  2300              MOVS     r3,#0
00059e  22ff              MOVS     r2,#0xff
0005a0  211f              MOVS     r1,#0x1f
0005a2  9003              STR      r0,[sp,#0xc]
0005a4  f7fffffe          BL       setLeds
0005a8  e025              B        |L11.1526|
                  |L11.1450|
;;;608    				}
;;;609    				else if(i<216)
0005aa  9804              LDR      r0,[sp,#0x10]
0005ac  28d8              CMP      r0,#0xd8
0005ae  da0a              BGE      |L11.1478|
;;;610    				{
;;;611    					setLeds(i,31,255,0,247);
0005b0  20f7              MOVS     r0,#0xf7
0005b2  9000              STR      r0,[sp,#0]
0005b4  9804              LDR      r0,[sp,#0x10]
0005b6  b280              UXTH     r0,r0
0005b8  2300              MOVS     r3,#0
0005ba  22ff              MOVS     r2,#0xff
0005bc  211f              MOVS     r1,#0x1f
0005be  9003              STR      r0,[sp,#0xc]
0005c0  f7fffffe          BL       setLeds
0005c4  e017              B        |L11.1526|
                  |L11.1478|
;;;612    				}
;;;613    				else if(i<236)
0005c6  9804              LDR      r0,[sp,#0x10]
0005c8  28ec              CMP      r0,#0xec
0005ca  da0a              BGE      |L11.1506|
;;;614    				{
;;;615    					setLeds(i,31,200,10,0);
0005cc  2000              MOVS     r0,#0
0005ce  9000              STR      r0,[sp,#0]
0005d0  9804              LDR      r0,[sp,#0x10]
0005d2  b280              UXTH     r0,r0
0005d4  230a              MOVS     r3,#0xa
0005d6  22c8              MOVS     r2,#0xc8
0005d8  211f              MOVS     r1,#0x1f
0005da  9003              STR      r0,[sp,#0xc]
0005dc  f7fffffe          BL       setLeds
0005e0  e009              B        |L11.1526|
                  |L11.1506|
;;;616    				}
;;;617    				else{
;;;618    					
;;;619    					setLeds(i,31,200,10,0);
0005e2  2000              MOVS     r0,#0
0005e4  9000              STR      r0,[sp,#0]
0005e6  9804              LDR      r0,[sp,#0x10]
0005e8  b280              UXTH     r0,r0
0005ea  230a              MOVS     r3,#0xa
0005ec  22c8              MOVS     r2,#0xc8
0005ee  211f              MOVS     r1,#0x1f
0005f0  9003              STR      r0,[sp,#0xc]
0005f2  f7fffffe          BL       setLeds
                  |L11.1526|
0005f6  9804              LDR      r0,[sp,#0x10]         ;589
0005f8  1c40              ADDS     r0,r0,#1              ;589
0005fa  9004              STR      r0,[sp,#0x10]         ;589
                  |L11.1532|
0005fc  9804              LDR      r0,[sp,#0x10]         ;589
0005fe  f5b07f80          CMP      r0,#0x100             ;589
000602  dd91              BLE      |L11.1320|
000604  e1d0              B        |L11.2472|
000606  e7ff              B        |L11.1544|
                  |L11.1544|
;;;620    				}
;;;621    			}
;;;622    			else
;;;623    			{
;;;624    			}
;;;625    		}
;;;626    	}
;;;627    	else if(maxAmpM > powerAvgM*15)
000608  ed9d0a06          VLDR     s0,[sp,#0x18]
00060c  eef20a0e          VMOV.F32 s1,#15.00000000
000610  ee600a20          VMUL.F32 s1,s0,s1
000614  ed9d0a05          VLDR     s0,[sp,#0x14]
000618  eef40ac0          VCMPE.F32 s1,s0
00061c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000620  d272              BCS      |L11.1800|
;;;628    	{
;;;629    		for(int i=48;i<=256;i++)
000622  2030              MOVS     r0,#0x30
000624  9004              STR      r0,[sp,#0x10]
000626  e069              B        |L11.1788|
                  |L11.1576|
;;;630    		{
;;;631    			if(crossLeds[i]==0 )
000628  497b              LDR      r1,|L11.2072|
00062a  9804              LDR      r0,[sp,#0x10]
00062c  f8510020          LDR      r0,[r1,r0,LSL #2]
000630  2800              CMP      r0,#0
000632  d160              BNE      |L11.1782|
;;;632    			{
;;;633    				if(i>=48 && i<93)
000634  9804              LDR      r0,[sp,#0x10]
000636  2830              CMP      r0,#0x30
000638  db0d              BLT      |L11.1622|
00063a  9804              LDR      r0,[sp,#0x10]
00063c  285d              CMP      r0,#0x5d
00063e  da0a              BGE      |L11.1622|
;;;634    				{
;;;635    					setLeds(i,0,0,0,0);
000640  2000              MOVS     r0,#0
000642  9000              STR      r0,[sp,#0]
000644  9804              LDR      r0,[sp,#0x10]
000646  b280              UXTH     r0,r0
000648  2300              MOVS     r3,#0
00064a  461a              MOV      r2,r3
00064c  4619              MOV      r1,r3
00064e  9003              STR      r0,[sp,#0xc]
000650  f7fffffe          BL       setLeds
000654  e04f              B        |L11.1782|
                  |L11.1622|
;;;636    				}
;;;637    				else if(i<132)
000656  9804              LDR      r0,[sp,#0x10]
000658  2884              CMP      r0,#0x84
00065a  da0a              BGE      |L11.1650|
;;;638    				{
;;;639    					setLeds(i,0,0,0,0);
00065c  2000              MOVS     r0,#0
00065e  9000              STR      r0,[sp,#0]
000660  9804              LDR      r0,[sp,#0x10]
000662  b280              UXTH     r0,r0
000664  2300              MOVS     r3,#0
000666  461a              MOV      r2,r3
000668  4619              MOV      r1,r3
00066a  9003              STR      r0,[sp,#0xc]
00066c  f7fffffe          BL       setLeds
000670  e041              B        |L11.1782|
                  |L11.1650|
;;;640    				}
;;;641    				else if(i<164)
000672  9804              LDR      r0,[sp,#0x10]
000674  28a4              CMP      r0,#0xa4
000676  da0a              BGE      |L11.1678|
;;;642    				{
;;;643    					setLeds(i,31,255,0,247);
000678  20f7              MOVS     r0,#0xf7
00067a  9000              STR      r0,[sp,#0]
00067c  9804              LDR      r0,[sp,#0x10]
00067e  b280              UXTH     r0,r0
000680  2300              MOVS     r3,#0
000682  22ff              MOVS     r2,#0xff
000684  211f              MOVS     r1,#0x1f
000686  9003              STR      r0,[sp,#0xc]
000688  f7fffffe          BL       setLeds
00068c  e033              B        |L11.1782|
                  |L11.1678|
;;;644    				}
;;;645    				else if(i<192)
00068e  9804              LDR      r0,[sp,#0x10]
000690  28c0              CMP      r0,#0xc0
000692  da0a              BGE      |L11.1706|
;;;646    				{
;;;647    					setLeds(i,31,255,0,247);
000694  20f7              MOVS     r0,#0xf7
000696  9000              STR      r0,[sp,#0]
000698  9804              LDR      r0,[sp,#0x10]
00069a  b280              UXTH     r0,r0
00069c  2300              MOVS     r3,#0
00069e  22ff              MOVS     r2,#0xff
0006a0  211f              MOVS     r1,#0x1f
0006a2  9003              STR      r0,[sp,#0xc]
0006a4  f7fffffe          BL       setLeds
0006a8  e025              B        |L11.1782|
                  |L11.1706|
;;;648    				}
;;;649    				else if(i<216)
0006aa  9804              LDR      r0,[sp,#0x10]
0006ac  28d8              CMP      r0,#0xd8
0006ae  da0a              BGE      |L11.1734|
;;;650    				{
;;;651    					setLeds(i,31,255,0,247);
0006b0  20f7              MOVS     r0,#0xf7
0006b2  9000              STR      r0,[sp,#0]
0006b4  9804              LDR      r0,[sp,#0x10]
0006b6  b280              UXTH     r0,r0
0006b8  2300              MOVS     r3,#0
0006ba  22ff              MOVS     r2,#0xff
0006bc  211f              MOVS     r1,#0x1f
0006be  9003              STR      r0,[sp,#0xc]
0006c0  f7fffffe          BL       setLeds
0006c4  e017              B        |L11.1782|
                  |L11.1734|
;;;652    				}
;;;653    				else if(i<236)
0006c6  9804              LDR      r0,[sp,#0x10]
0006c8  28ec              CMP      r0,#0xec
0006ca  da0a              BGE      |L11.1762|
;;;654    				{
;;;655    					setLeds(i,31,200,10,0);
0006cc  2000              MOVS     r0,#0
0006ce  9000              STR      r0,[sp,#0]
0006d0  9804              LDR      r0,[sp,#0x10]
0006d2  b280              UXTH     r0,r0
0006d4  230a              MOVS     r3,#0xa
0006d6  22c8              MOVS     r2,#0xc8
0006d8  211f              MOVS     r1,#0x1f
0006da  9003              STR      r0,[sp,#0xc]
0006dc  f7fffffe          BL       setLeds
0006e0  e009              B        |L11.1782|
                  |L11.1762|
;;;656    				}
;;;657    				else{
;;;658    					
;;;659    					setLeds(i,31,200,10,0);
0006e2  2000              MOVS     r0,#0
0006e4  9000              STR      r0,[sp,#0]
0006e6  9804              LDR      r0,[sp,#0x10]
0006e8  b280              UXTH     r0,r0
0006ea  230a              MOVS     r3,#0xa
0006ec  22c8              MOVS     r2,#0xc8
0006ee  211f              MOVS     r1,#0x1f
0006f0  9003              STR      r0,[sp,#0xc]
0006f2  f7fffffe          BL       setLeds
                  |L11.1782|
0006f6  9804              LDR      r0,[sp,#0x10]         ;629
0006f8  1c40              ADDS     r0,r0,#1              ;629
0006fa  9004              STR      r0,[sp,#0x10]         ;629
                  |L11.1788|
0006fc  9804              LDR      r0,[sp,#0x10]         ;629
0006fe  f5b07f80          CMP      r0,#0x100             ;629
000702  dd91              BLE      |L11.1576|
000704  e150              B        |L11.2472|
000706  e7ff              B        |L11.1800|
                  |L11.1800|
;;;660    				}
;;;661    			}
;;;662    			else
;;;663    			{
;;;664    			}
;;;665    		}
;;;666    	}
;;;667    	else if(maxAmpM > powerAvgM*10)
000708  ed9d0a06          VLDR     s0,[sp,#0x18]
00070c  eef20a04          VMOV.F32 s1,#10.00000000
000710  ee600a20          VMUL.F32 s1,s0,s1
000714  ed9d0a05          VLDR     s0,[sp,#0x14]
000718  eef40ac0          VCMPE.F32 s1,s0
00071c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000720  d254              BCS      |L11.1996|
;;;668    	{
;;;669    		for(int i=48;i<=256;i++)
000722  2030              MOVS     r0,#0x30
000724  9004              STR      r0,[sp,#0x10]
000726  e04c              B        |L11.1986|
                  |L11.1832|
;;;670    		{
;;;671    			if(crossLeds[i]==0 )
000728  493b              LDR      r1,|L11.2072|
00072a  9804              LDR      r0,[sp,#0x10]
00072c  f8510020          LDR      r0,[r1,r0,LSL #2]
000730  bb58              CBNZ     r0,|L11.1930|
;;;672    			{
;;;673    				if(i>=48 && i<164)
000732  9804              LDR      r0,[sp,#0x10]
000734  2830              CMP      r0,#0x30
000736  db0d              BLT      |L11.1876|
000738  9804              LDR      r0,[sp,#0x10]
00073a  28a4              CMP      r0,#0xa4
00073c  da0a              BGE      |L11.1876|
;;;674    				{
;;;675    					setLeds(i,0,0,0,0);
00073e  2000              MOVS     r0,#0
000740  9000              STR      r0,[sp,#0]
000742  9804              LDR      r0,[sp,#0x10]
000744  b280              UXTH     r0,r0
000746  2300              MOVS     r3,#0
000748  461a              MOV      r2,r3
00074a  4619              MOV      r1,r3
00074c  9003              STR      r0,[sp,#0xc]
00074e  f7fffffe          BL       setLeds
000752  e033              B        |L11.1980|
                  |L11.1876|
;;;676    				}
;;;677    				else if(i<192)
000754  9804              LDR      r0,[sp,#0x10]
000756  28c0              CMP      r0,#0xc0
000758  da0a              BGE      |L11.1904|
;;;678    				{
;;;679    					setLeds(i,31,255,0,247);
00075a  20f7              MOVS     r0,#0xf7
00075c  9000              STR      r0,[sp,#0]
00075e  9804              LDR      r0,[sp,#0x10]
000760  b280              UXTH     r0,r0
000762  2300              MOVS     r3,#0
000764  22ff              MOVS     r2,#0xff
000766  211f              MOVS     r1,#0x1f
000768  9003              STR      r0,[sp,#0xc]
00076a  f7fffffe          BL       setLeds
00076e  e025              B        |L11.1980|
                  |L11.1904|
;;;680    				}
;;;681    				else if(i<216)
000770  9804              LDR      r0,[sp,#0x10]
000772  28d8              CMP      r0,#0xd8
000774  da0a              BGE      |L11.1932|
;;;682    				{
;;;683    					setLeds(i,31,255,0,247);
000776  20f7              MOVS     r0,#0xf7
000778  9000              STR      r0,[sp,#0]
00077a  9804              LDR      r0,[sp,#0x10]
00077c  b280              UXTH     r0,r0
00077e  2300              MOVS     r3,#0
000780  22ff              MOVS     r2,#0xff
000782  211f              MOVS     r1,#0x1f
000784  9003              STR      r0,[sp,#0xc]
000786  f7fffffe          BL       setLeds
                  |L11.1930|
00078a  e017              B        |L11.1980|
                  |L11.1932|
;;;684    				}
;;;685    				else if(i<236)
00078c  9804              LDR      r0,[sp,#0x10]
00078e  28ec              CMP      r0,#0xec
000790  da0a              BGE      |L11.1960|
;;;686    				{
;;;687    					setLeds(i,31,200,10,0);
000792  2000              MOVS     r0,#0
000794  9000              STR      r0,[sp,#0]
000796  9804              LDR      r0,[sp,#0x10]
000798  b280              UXTH     r0,r0
00079a  230a              MOVS     r3,#0xa
00079c  22c8              MOVS     r2,#0xc8
00079e  211f              MOVS     r1,#0x1f
0007a0  9003              STR      r0,[sp,#0xc]
0007a2  f7fffffe          BL       setLeds
0007a6  e009              B        |L11.1980|
                  |L11.1960|
;;;688    				}
;;;689    				else{
;;;690    					
;;;691    					setLeds(i,31,200,10,0);
0007a8  2000              MOVS     r0,#0
0007aa  9000              STR      r0,[sp,#0]
0007ac  9804              LDR      r0,[sp,#0x10]
0007ae  b280              UXTH     r0,r0
0007b0  230a              MOVS     r3,#0xa
0007b2  22c8              MOVS     r2,#0xc8
0007b4  211f              MOVS     r1,#0x1f
0007b6  9003              STR      r0,[sp,#0xc]
0007b8  f7fffffe          BL       setLeds
                  |L11.1980|
0007bc  9804              LDR      r0,[sp,#0x10]         ;669
0007be  1c40              ADDS     r0,r0,#1              ;669
0007c0  9004              STR      r0,[sp,#0x10]         ;669
                  |L11.1986|
0007c2  9804              LDR      r0,[sp,#0x10]         ;669
0007c4  f5b07f80          CMP      r0,#0x100             ;669
0007c8  ddae              BLE      |L11.1832|
0007ca  e0ed              B        |L11.2472|
                  |L11.1996|
;;;692    				}
;;;693    			}
;;;694    			else
;;;695    			{
;;;696    			}
;;;697    		}
;;;698    	}
;;;699    	else if(maxAmpM > powerAvgM*5)
0007cc  ed9d0a06          VLDR     s0,[sp,#0x18]
0007d0  eef10a04          VMOV.F32 s1,#5.00000000
0007d4  ee600a20          VMUL.F32 s1,s0,s1
0007d8  ed9d0a05          VLDR     s0,[sp,#0x14]
0007dc  eef40ac0          VCMPE.F32 s1,s0
0007e0  eef1fa10          VMRS     APSR_nzcv,FPSCR
0007e4  d248              BCS      |L11.2168|
;;;700    	{
;;;701    		for(int i=48;i<=256;i++)
0007e6  2030              MOVS     r0,#0x30
0007e8  9004              STR      r0,[sp,#0x10]
0007ea  e040              B        |L11.2158|
                  |L11.2028|
;;;702    		{
;;;703    			if(crossLeds[i]==0 )
0007ec  490a              LDR      r1,|L11.2072|
0007ee  9804              LDR      r0,[sp,#0x10]
0007f0  f8510020          LDR      r0,[r1,r0,LSL #2]
0007f4  b9f8              CBNZ     r0,|L11.2102|
;;;704    			{
;;;705    				if(i>=48 && i<192)
0007f6  9804              LDR      r0,[sp,#0x10]
0007f8  2830              CMP      r0,#0x30
0007fa  db0f              BLT      |L11.2076|
0007fc  9804              LDR      r0,[sp,#0x10]
0007fe  28c0              CMP      r0,#0xc0
000800  da0c              BGE      |L11.2076|
;;;706    				{
;;;707    					setLeds(i,0,0,0,0);
000802  2000              MOVS     r0,#0
000804  9000              STR      r0,[sp,#0]
000806  9804              LDR      r0,[sp,#0x10]
000808  b280              UXTH     r0,r0
00080a  2300              MOVS     r3,#0
00080c  461a              MOV      r2,r3
00080e  4619              MOV      r1,r3
000810  9003              STR      r0,[sp,#0xc]
000812  f7fffffe          BL       setLeds
000816  e027              B        |L11.2152|
                  |L11.2072|
                          DCD      crossLeds
                  |L11.2076|
;;;708    				}
;;;709    				
;;;710    				else if(i<216)
00081c  9804              LDR      r0,[sp,#0x10]
00081e  28d8              CMP      r0,#0xd8
000820  da0a              BGE      |L11.2104|
;;;711    				{
;;;712    					setLeds(i,31,255,0,247);
000822  20f7              MOVS     r0,#0xf7
000824  9000              STR      r0,[sp,#0]
000826  9804              LDR      r0,[sp,#0x10]
000828  b280              UXTH     r0,r0
00082a  2300              MOVS     r3,#0
00082c  22ff              MOVS     r2,#0xff
00082e  211f              MOVS     r1,#0x1f
000830  9003              STR      r0,[sp,#0xc]
000832  f7fffffe          BL       setLeds
                  |L11.2102|
000836  e017              B        |L11.2152|
                  |L11.2104|
;;;713    				}
;;;714    				else if(i<236)
000838  9804              LDR      r0,[sp,#0x10]
00083a  28ec              CMP      r0,#0xec
00083c  da0a              BGE      |L11.2132|
;;;715    				{
;;;716    					setLeds(i,31,200,10,0);
00083e  2000              MOVS     r0,#0
000840  9000              STR      r0,[sp,#0]
000842  9804              LDR      r0,[sp,#0x10]
000844  b280              UXTH     r0,r0
000846  230a              MOVS     r3,#0xa
000848  22c8              MOVS     r2,#0xc8
00084a  211f              MOVS     r1,#0x1f
00084c  9003              STR      r0,[sp,#0xc]
00084e  f7fffffe          BL       setLeds
000852  e009              B        |L11.2152|
                  |L11.2132|
;;;717    				}
;;;718    				else{
;;;719    					
;;;720    					setLeds(i,31,200,10,0);
000854  2000              MOVS     r0,#0
000856  9000              STR      r0,[sp,#0]
000858  9804              LDR      r0,[sp,#0x10]
00085a  b280              UXTH     r0,r0
00085c  230a              MOVS     r3,#0xa
00085e  22c8              MOVS     r2,#0xc8
000860  211f              MOVS     r1,#0x1f
000862  9003              STR      r0,[sp,#0xc]
000864  f7fffffe          BL       setLeds
                  |L11.2152|
000868  9804              LDR      r0,[sp,#0x10]         ;701
00086a  1c40              ADDS     r0,r0,#1              ;701
00086c  9004              STR      r0,[sp,#0x10]         ;701
                  |L11.2158|
00086e  9804              LDR      r0,[sp,#0x10]         ;701
000870  f5b07f80          CMP      r0,#0x100             ;701
000874  ddba              BLE      |L11.2028|
000876  e097              B        |L11.2472|
                  |L11.2168|
;;;721    				}
;;;722    			}
;;;723    			else
;;;724    			{
;;;725    			}
;;;726    		}
;;;727    	}
;;;728    	else if(maxAmpM > powerAvgM)
000878  ed9d0a05          VLDR     s0,[sp,#0x14]
00087c  eddd0a06          VLDR     s1,[sp,#0x18]
000880  eeb40ae0          VCMPE.F32 s0,s1
000884  eef1fa10          VMRS     APSR_nzcv,FPSCR
000888  dd38              BLE      |L11.2300|
;;;729    	{
;;;730    		for(int i=48;i<=256;i++)
00088a  2030              MOVS     r0,#0x30
00088c  9004              STR      r0,[sp,#0x10]
00088e  e030              B        |L11.2290|
                  |L11.2192|
;;;731    		{
;;;732    			if(crossLeds[i]==0 )
000890  4971              LDR      r1,|L11.2648|
000892  9804              LDR      r0,[sp,#0x10]
000894  f8510020          LDR      r0,[r1,r0,LSL #2]
000898  bb40              CBNZ     r0,|L11.2284|
;;;733    			{
;;;734    				if(i>=48 && i<216)
00089a  9804              LDR      r0,[sp,#0x10]
00089c  2830              CMP      r0,#0x30
00089e  db0d              BLT      |L11.2236|
0008a0  9804              LDR      r0,[sp,#0x10]
0008a2  28d8              CMP      r0,#0xd8
0008a4  da0a              BGE      |L11.2236|
;;;735    				{
;;;736    					setLeds(i,0,0,0,0);
0008a6  2000              MOVS     r0,#0
0008a8  9000              STR      r0,[sp,#0]
0008aa  9804              LDR      r0,[sp,#0x10]
0008ac  b280              UXTH     r0,r0
0008ae  2300              MOVS     r3,#0
0008b0  461a              MOV      r2,r3
0008b2  4619              MOV      r1,r3
0008b4  9003              STR      r0,[sp,#0xc]
0008b6  f7fffffe          BL       setLeds
0008ba  e017              B        |L11.2284|
                  |L11.2236|
;;;737    				}
;;;738    				
;;;739    				else if(i<236)
0008bc  9804              LDR      r0,[sp,#0x10]
0008be  28ec              CMP      r0,#0xec
0008c0  da0a              BGE      |L11.2264|
;;;740    				{
;;;741    					setLeds(i,31,200,10,0);
0008c2  2000              MOVS     r0,#0
0008c4  9000              STR      r0,[sp,#0]
0008c6  9804              LDR      r0,[sp,#0x10]
0008c8  b280              UXTH     r0,r0
0008ca  230a              MOVS     r3,#0xa
0008cc  22c8              MOVS     r2,#0xc8
0008ce  211f              MOVS     r1,#0x1f
0008d0  9003              STR      r0,[sp,#0xc]
0008d2  f7fffffe          BL       setLeds
0008d6  e009              B        |L11.2284|
                  |L11.2264|
;;;742    				}
;;;743    				else{
;;;744    					
;;;745    					setLeds(i,31,200,10,0);
0008d8  2000              MOVS     r0,#0
0008da  9000              STR      r0,[sp,#0]
0008dc  9804              LDR      r0,[sp,#0x10]
0008de  b280              UXTH     r0,r0
0008e0  230a              MOVS     r3,#0xa
0008e2  22c8              MOVS     r2,#0xc8
0008e4  211f              MOVS     r1,#0x1f
0008e6  9003              STR      r0,[sp,#0xc]
0008e8  f7fffffe          BL       setLeds
                  |L11.2284|
0008ec  9804              LDR      r0,[sp,#0x10]         ;730
0008ee  1c40              ADDS     r0,r0,#1              ;730
0008f0  9004              STR      r0,[sp,#0x10]         ;730
                  |L11.2290|
0008f2  9804              LDR      r0,[sp,#0x10]         ;730
0008f4  f5b07f80          CMP      r0,#0x100             ;730
0008f8  ddca              BLE      |L11.2192|
0008fa  e055              B        |L11.2472|
                  |L11.2300|
;;;746    				}
;;;747    			}
;;;748    			else
;;;749    			{
;;;750    			}
;;;751    		}
;;;752    	}
;;;753    else if(maxAmpM > powerAvgM)
0008fc  ed9d0a05          VLDR     s0,[sp,#0x14]
000900  eddd0a06          VLDR     s1,[sp,#0x18]
000904  eeb40ae0          VCMPE.F32 s0,s1
000908  eef1fa10          VMRS     APSR_nzcv,FPSCR
00090c  dd2a              BLE      |L11.2404|
;;;754    	{
;;;755    		for(int i=48;i<=256;i++)
00090e  2030              MOVS     r0,#0x30
000910  9004              STR      r0,[sp,#0x10]
000912  e022              B        |L11.2394|
                  |L11.2324|
;;;756    		{
;;;757    			if(crossLeds[i]==0 )
000914  4950              LDR      r1,|L11.2648|
000916  9804              LDR      r0,[sp,#0x10]
000918  f8510020          LDR      r0,[r1,r0,LSL #2]
00091c  b9d0              CBNZ     r0,|L11.2388|
;;;758    			{
;;;759    				if(i>=48 && i<236)
00091e  9804              LDR      r0,[sp,#0x10]
000920  2830              CMP      r0,#0x30
000922  db0d              BLT      |L11.2368|
000924  9804              LDR      r0,[sp,#0x10]
000926  28ec              CMP      r0,#0xec
000928  da0a              BGE      |L11.2368|
;;;760    				{
;;;761    					setLeds(i,0,0,0,0);
00092a  2000              MOVS     r0,#0
00092c  9000              STR      r0,[sp,#0]
00092e  9804              LDR      r0,[sp,#0x10]
000930  b280              UXTH     r0,r0
000932  2300              MOVS     r3,#0
000934  461a              MOV      r2,r3
000936  4619              MOV      r1,r3
000938  9003              STR      r0,[sp,#0xc]
00093a  f7fffffe          BL       setLeds
00093e  e009              B        |L11.2388|
                  |L11.2368|
;;;762    				}
;;;763    				
;;;764    				else{
;;;765    					
;;;766    					setLeds(i,31,200,10,0);
000940  2000              MOVS     r0,#0
000942  9000              STR      r0,[sp,#0]
000944  9804              LDR      r0,[sp,#0x10]
000946  b280              UXTH     r0,r0
000948  230a              MOVS     r3,#0xa
00094a  22c8              MOVS     r2,#0xc8
00094c  211f              MOVS     r1,#0x1f
00094e  9003              STR      r0,[sp,#0xc]
000950  f7fffffe          BL       setLeds
                  |L11.2388|
000954  9804              LDR      r0,[sp,#0x10]         ;755
000956  1c40              ADDS     r0,r0,#1              ;755
000958  9004              STR      r0,[sp,#0x10]         ;755
                  |L11.2394|
00095a  9804              LDR      r0,[sp,#0x10]         ;755
00095c  f5b07f80          CMP      r0,#0x100             ;755
000960  ddd8              BLE      |L11.2324|
000962  e021              B        |L11.2472|
                  |L11.2404|
;;;767    				}
;;;768    			}
;;;769    		
;;;770    			else
;;;771    			{
;;;772    			}
;;;773    		}
;;;774    		}
;;;775    	
;;;776    	else
;;;777    	{
;;;778    		for(int i=48;i<=256;i++)
000964  2030              MOVS     r0,#0x30
000966  9004              STR      r0,[sp,#0x10]
000968  e017              B        |L11.2458|
                  |L11.2410|
;;;779    		{
;;;780    			if(crossLeds[i]==0 )
00096a  493b              LDR      r1,|L11.2648|
00096c  9804              LDR      r0,[sp,#0x10]
00096e  f8510020          LDR      r0,[r1,r0,LSL #2]
000972  b978              CBNZ     r0,|L11.2452|
;;;781    			{
;;;782    				if(i>=48 && i<256)
000974  9804              LDR      r0,[sp,#0x10]
000976  2830              CMP      r0,#0x30
000978  db0c              BLT      |L11.2452|
00097a  9804              LDR      r0,[sp,#0x10]
00097c  28ff              CMP      r0,#0xff
00097e  dc09              BGT      |L11.2452|
;;;783    				{
;;;784    					setLeds(i,0,0,0,0);
000980  2000              MOVS     r0,#0
000982  9000              STR      r0,[sp,#0]
000984  9804              LDR      r0,[sp,#0x10]
000986  b280              UXTH     r0,r0
000988  2300              MOVS     r3,#0
00098a  461a              MOV      r2,r3
00098c  4619              MOV      r1,r3
00098e  9003              STR      r0,[sp,#0xc]
000990  f7fffffe          BL       setLeds
                  |L11.2452|
000994  9804              LDR      r0,[sp,#0x10]         ;778
000996  1c40              ADDS     r0,r0,#1              ;778
000998  9004              STR      r0,[sp,#0x10]         ;778
                  |L11.2458|
00099a  9804              LDR      r0,[sp,#0x10]         ;778
00099c  f5b07f80          CMP      r0,#0x100             ;778
0009a0  dde3              BLE      |L11.2410|
0009a2  e001              B        |L11.2472|
                  |L11.2468|
;;;785    				}
;;;786    			}
;;;787    		}
;;;788    	}
;;;789    }
;;;790    else
;;;791    {
;;;792    	clearDisk();
0009a4  f7fffffe          BL       clearDisk
                  |L11.2472|
;;;793    }
;;;794    	
;;;795    				if(x>=0 && x<255)
0009a8  482c              LDR      r0,|L11.2652|
0009aa  6800              LDR      r0,[r0,#0]  ; x
0009ac  2800              CMP      r0,#0
0009ae  db12              BLT      |L11.2518|
0009b0  482a              LDR      r0,|L11.2652|
0009b2  6800              LDR      r0,[r0,#0]  ; x
0009b4  28ff              CMP      r0,#0xff
0009b6  da0e              BGE      |L11.2518|
;;;796    				{
;;;797    					x++;
0009b8  4828              LDR      r0,|L11.2652|
0009ba  6800              LDR      r0,[r0,#0]  ; x
0009bc  1c40              ADDS     r0,r0,#1
0009be  4927              LDR      r1,|L11.2652|
0009c0  6008              STR      r0,[r1,#0]  ; x
;;;798    					b++;
0009c2  4827              LDR      r0,|L11.2656|
0009c4  6800              LDR      r0,[r0,#0]  ; b
0009c6  1c40              ADDS     r0,r0,#1
0009c8  4925              LDR      r1,|L11.2656|
0009ca  6008              STR      r0,[r1,#0]  ; b
;;;799    					g--;
0009cc  4825              LDR      r0,|L11.2660|
0009ce  6800              LDR      r0,[r0,#0]  ; g
0009d0  1e40              SUBS     r0,r0,#1
0009d2  4924              LDR      r1,|L11.2660|
0009d4  6008              STR      r0,[r1,#0]  ; g
                  |L11.2518|
;;;800    				}
;;;801    				if(x>=255 && x<510)
0009d6  4821              LDR      r0,|L11.2652|
0009d8  6800              LDR      r0,[r0,#0]  ; x
0009da  28ff              CMP      r0,#0xff
0009dc  db13              BLT      |L11.2566|
0009de  481f              LDR      r0,|L11.2652|
0009e0  6800              LDR      r0,[r0,#0]  ; x
0009e2  f5b07fff          CMP      r0,#0x1fe
0009e6  da0e              BGE      |L11.2566|
;;;802    				{
;;;803    					x++;
0009e8  481c              LDR      r0,|L11.2652|
0009ea  6800              LDR      r0,[r0,#0]  ; x
0009ec  1c40              ADDS     r0,r0,#1
0009ee  491b              LDR      r1,|L11.2652|
0009f0  6008              STR      r0,[r1,#0]  ; x
;;;804    					b--;
0009f2  481b              LDR      r0,|L11.2656|
0009f4  6800              LDR      r0,[r0,#0]  ; b
0009f6  1e40              SUBS     r0,r0,#1
0009f8  4919              LDR      r1,|L11.2656|
0009fa  6008              STR      r0,[r1,#0]  ; b
;;;805    					g++;
0009fc  4819              LDR      r0,|L11.2660|
0009fe  6800              LDR      r0,[r0,#0]  ; g
000a00  1c40              ADDS     r0,r0,#1
000a02  4918              LDR      r1,|L11.2660|
000a04  6008              STR      r0,[r1,#0]  ; g
                  |L11.2566|
;;;806    				}
;;;807    				if(x==510)
000a06  4815              LDR      r0,|L11.2652|
000a08  6800              LDR      r0,[r0,#0]  ; x
000a0a  f5b07fff          CMP      r0,#0x1fe
000a0e  d102              BNE      |L11.2582|
;;;808    				{
;;;809    					x=0;
000a10  2000              MOVS     r0,#0
000a12  4912              LDR      r1,|L11.2652|
000a14  6008              STR      r0,[r1,#0]  ; x
                  |L11.2582|
;;;810    				}
;;;811    
;;;812    
;;;813    					for(int i=0;i<48;i++)
000a16  2000              MOVS     r0,#0
000a18  9004              STR      r0,[sp,#0x10]
000a1a  e012              B        |L11.2626|
                  |L11.2588|
;;;814    					{
;;;815    						
;;;816    					setLeds(i,31,b,g,0);
000a1c  2000              MOVS     r0,#0
000a1e  9000              STR      r0,[sp,#0]
000a20  4810              LDR      r0,|L11.2660|
000a22  7800              LDRB     r0,[r0,#0]  ; g
000a24  9003              STR      r0,[sp,#0xc]
000a26  480e              LDR      r0,|L11.2656|
000a28  7800              LDRB     r0,[r0,#0]  ; b
000a2a  9002              STR      r0,[sp,#8]
000a2c  9804              LDR      r0,[sp,#0x10]
000a2e  b280              UXTH     r0,r0
000a30  9001              STR      r0,[sp,#4]
000a32  211f              MOVS     r1,#0x1f
000a34  e9dd2302          LDRD     r2,r3,[sp,#8]
000a38  f7fffffe          BL       setLeds
000a3c  9804              LDR      r0,[sp,#0x10]         ;813
000a3e  1c40              ADDS     r0,r0,#1              ;813
000a40  9004              STR      r0,[sp,#0x10]         ;813
                  |L11.2626|
000a42  9804              LDR      r0,[sp,#0x10]         ;813
000a44  2830              CMP      r0,#0x30              ;813
000a46  dbe9              BLT      |L11.2588|
;;;817    					
;;;818    					}
;;;819    					
;;;820    								
;;;821    
;;;822    
;;;823    		showleds();
000a48  f7fffffe          BL       showleds
;;;824    	delay(1000);
000a4c  f44f707a          MOV      r0,#0x3e8
000a50  f7fffffe          BL       delay
;;;825    		//clearDisk();
;;;826    					
;;;827    	}
000a54  b008              ADD      sp,sp,#0x20
000a56  bd00              POP      {pc}
;;;828    void lightning(float maxAmpL, float powerAvgL)
                          ENDP

                  |L11.2648|
                          DCD      crossLeds
                  |L11.2652|
                          DCD      x
                  |L11.2656|
                          DCD      b
                  |L11.2660|
                          DCD      g

                          AREA ||i.setLeds||, CODE, READONLY, ALIGN=2

                  setLeds PROC
;;;275    }
;;;276    void setLeds(uint16_t led, uint8_t brightness, uint8_t b,uint8_t g, uint8_t r) // This is where user data is stored 
000000  b5f0              PUSH     {r4-r7,lr}
;;;277    {
000002  9c05              LDR      r4,[sp,#0x14]
;;;278    
;;;279    	*(ledArray +(led*4)) = (0xE + brightness);
000004  f101050e          ADD      r5,r1,#0xe
000008  0086              LSLS     r6,r0,#2
00000a  4f0a              LDR      r7,|L12.52|
00000c  683f              LDR      r7,[r7,#0]  ; ledArray
00000e  f8475026          STR      r5,[r7,r6,LSL #2]
;;;280    	*(ledArray +(led*4)+1) = b;
000012  4e08              LDR      r6,|L12.52|
000014  6836              LDR      r6,[r6,#0]  ; ledArray
000016  eb061500          ADD      r5,r6,r0,LSL #4
00001a  606a              STR      r2,[r5,#4]
;;;281    	*(ledArray +(led*4)+2) = g;
00001c  4e05              LDR      r6,|L12.52|
00001e  6836              LDR      r6,[r6,#0]  ; ledArray
000020  eb061500          ADD      r5,r6,r0,LSL #4
000024  60ab              STR      r3,[r5,#8]
;;;282    	*(ledArray +(led*4)+3) = r;
000026  4e03              LDR      r6,|L12.52|
000028  6836              LDR      r6,[r6,#0]  ; ledArray
00002a  eb061500          ADD      r5,r6,r0,LSL #4
00002e  60ec              STR      r4,[r5,#0xc]
;;;283    }
000030  bdf0              POP      {r4-r7,pc}
;;;284    
                          ENDP

000032  0000              DCW      0x0000
                  |L12.52|
                          DCD      ledArray

                          AREA ||i.showleds||, CODE, READONLY, ALIGN=2

                  showleds PROC
;;;240    
;;;241    void showleds() // must call this after leds are set, so that the LEDs are displayed
000000  b500              PUSH     {lr}
;;;242    {
;;;243    
;;;244    	
;;;245    	//Start frame
;;;246    		for(i=0;i<4;i++)
000002  2000              MOVS     r0,#0
000004  4938              LDR      r1,|L13.232|
000006  8008              STRH     r0,[r1,#0]
000008  e00b              B        |L13.34|
                  |L13.10|
;;;247    	{
;;;248    	
;;;249    	SPI9->FIFOWR = SPI_FIFOWR_TXDATA(0x00)| SPI_FIFOWR_RXIGNORE(1)| SPI_FIFOWR_LEN(7); 
00000a  f04f60e8          MOV      r0,#0x7400000
00000e  4937              LDR      r1,|L13.236|
000010  6008              STR      r0,[r1,#0]
;;;250     		delay(150);
000012  2096              MOVS     r0,#0x96
000014  f7fffffe          BL       delay
000018  4833              LDR      r0,|L13.232|
00001a  8800              LDRH     r0,[r0,#0]            ;246  ; i
00001c  1c40              ADDS     r0,r0,#1              ;246
00001e  4932              LDR      r1,|L13.232|
000020  8008              STRH     r0,[r1,#0]            ;246
                  |L13.34|
000022  4831              LDR      r0,|L13.232|
000024  8800              LDRH     r0,[r0,#0]            ;246  ; i
000026  2804              CMP      r0,#4                 ;246
000028  dbef              BLT      |L13.10|
;;;251    	}
;;;252    	
;;;253    	// New updated led frame
;;;254    	for(i=0;i<=1023;i+=4)
00002a  2000              MOVS     r0,#0
00002c  492e              LDR      r1,|L13.232|
00002e  8008              STRH     r0,[r1,#0]
000030  e03f              B        |L13.178|
                  |L13.50|
;;;255    	{
;;;256    		SPI9->FIFOWR = SPI_FIFOWR_TXDATA(*(ledArray +i) )| SPI_FIFOWR_RXIGNORE(1) | SPI_FIFOWR_LEN(7);
000032  482f              LDR      r0,|L13.240|
000034  6800              LDR      r0,[r0,#0]  ; ledArray
000036  492c              LDR      r1,|L13.232|
000038  8809              LDRH     r1,[r1,#0]  ; i
00003a  f8300021          LDRH     r0,[r0,r1,LSL #2]
00003e  b280              UXTH     r0,r0
000040  f04060e8          ORR      r0,r0,#0x7400000
000044  4929              LDR      r1,|L13.236|
000046  6008              STR      r0,[r1,#0]
;;;257    	  delay(150);
000048  2096              MOVS     r0,#0x96
00004a  f7fffffe          BL       delay
;;;258    		SPI9->FIFOWR = SPI_FIFOWR_TXDATA(*(ledArray +(i+1)))| SPI_FIFOWR_RXIGNORE(1) | SPI_FIFOWR_LEN(7);
00004e  4828              LDR      r0,|L13.240|
000050  6801              LDR      r1,[r0,#0]  ; ledArray
000052  4825              LDR      r0,|L13.232|
000054  8800              LDRH     r0,[r0,#0]  ; i
000056  1c40              ADDS     r0,r0,#1
000058  f8310020          LDRH     r0,[r1,r0,LSL #2]
00005c  b280              UXTH     r0,r0
00005e  f04060e8          ORR      r0,r0,#0x7400000
000062  4922              LDR      r1,|L13.236|
000064  6008              STR      r0,[r1,#0]
;;;259    	  delay(150);
000066  2096              MOVS     r0,#0x96
000068  f7fffffe          BL       delay
;;;260    		SPI9->FIFOWR = SPI_FIFOWR_TXDATA(*(ledArray +(i+2)))| SPI_FIFOWR_RXIGNORE(1) | SPI_FIFOWR_LEN(7);
00006c  4820              LDR      r0,|L13.240|
00006e  6801              LDR      r1,[r0,#0]  ; ledArray
000070  481d              LDR      r0,|L13.232|
000072  8800              LDRH     r0,[r0,#0]  ; i
000074  1c80              ADDS     r0,r0,#2
000076  f8310020          LDRH     r0,[r1,r0,LSL #2]
00007a  b280              UXTH     r0,r0
00007c  f04060e8          ORR      r0,r0,#0x7400000
000080  491a              LDR      r1,|L13.236|
000082  6008              STR      r0,[r1,#0]
;;;261    	  delay(150);
000084  2096              MOVS     r0,#0x96
000086  f7fffffe          BL       delay
;;;262    		SPI9->FIFOWR = SPI_FIFOWR_TXDATA(*(ledArray +(i+3)))| SPI_FIFOWR_RXIGNORE(1) | SPI_FIFOWR_LEN(7);
00008a  4819              LDR      r0,|L13.240|
00008c  6801              LDR      r1,[r0,#0]  ; ledArray
00008e  4816              LDR      r0,|L13.232|
000090  8800              LDRH     r0,[r0,#0]  ; i
000092  1cc0              ADDS     r0,r0,#3
000094  f8310020          LDRH     r0,[r1,r0,LSL #2]
000098  b280              UXTH     r0,r0
00009a  f04060e8          ORR      r0,r0,#0x7400000
00009e  4913              LDR      r1,|L13.236|
0000a0  6008              STR      r0,[r1,#0]
;;;263    	  delay(150);
0000a2  2096              MOVS     r0,#0x96
0000a4  f7fffffe          BL       delay
0000a8  480f              LDR      r0,|L13.232|
0000aa  8800              LDRH     r0,[r0,#0]            ;254  ; i
0000ac  1d00              ADDS     r0,r0,#4              ;254
0000ae  490e              LDR      r1,|L13.232|
0000b0  8008              STRH     r0,[r1,#0]            ;254
                  |L13.178|
0000b2  480d              LDR      r0,|L13.232|
0000b4  8800              LDRH     r0,[r0,#0]            ;254  ; i
0000b6  f5b06f80          CMP      r0,#0x400             ;254
0000ba  dbba              BLT      |L13.50|
;;;264    	
;;;265    			
;;;266    	}
;;;267    	// End frame
;;;268    		for(i=0;i<15;i++) //End frame needs to be as long as number of LEDs/2
0000bc  2000              MOVS     r0,#0
0000be  490a              LDR      r1,|L13.232|
0000c0  8008              STRH     r0,[r1,#0]
0000c2  e00b              B        |L13.220|
                  |L13.196|
;;;269    	{
;;;270    		
;;;271        SPI9->FIFOWR = SPI_FIFOWR_TXDATA(0x00) | SPI_FIFOWR_RXIGNORE(1) | SPI_FIFOWR_LEN(7);  
0000c4  f04f60e8          MOV      r0,#0x7400000
0000c8  4908              LDR      r1,|L13.236|
0000ca  6008              STR      r0,[r1,#0]
;;;272    		delay(100);
0000cc  2064              MOVS     r0,#0x64
0000ce  f7fffffe          BL       delay
0000d2  4805              LDR      r0,|L13.232|
0000d4  8800              LDRH     r0,[r0,#0]            ;268  ; i
0000d6  1c40              ADDS     r0,r0,#1              ;268
0000d8  4903              LDR      r1,|L13.232|
0000da  8008              STRH     r0,[r1,#0]            ;268
                  |L13.220|
0000dc  4802              LDR      r0,|L13.232|
0000de  8800              LDRH     r0,[r0,#0]            ;268  ; i
0000e0  280f              CMP      r0,#0xf               ;268
0000e2  dbef              BLT      |L13.196|
;;;273    		
;;;274      }
;;;275    }
0000e4  bd00              POP      {pc}
;;;276    void setLeds(uint16_t led, uint8_t brightness, uint8_t b,uint8_t g, uint8_t r) // This is where user data is stored 
                          ENDP

0000e6  0000              DCW      0x0000
                  |L13.232|
                          DCD      i
                  |L13.236|
                          DCD      0x4009ae20
                  |L13.240|
                          DCD      ledArray

                          AREA ||i.startUp||, CODE, READONLY, ALIGN=2

                  startUp PROC
;;;326    
;;;327    void startUp()
000000  b518              PUSH     {r3,r4,lr}
;;;328    {
;;;329    		for(int i=0;i<253;i++)
000002  2400              MOVS     r4,#0
000004  e052              B        |L14.172|
                  |L14.6|
;;;330    	{
;;;331    	
;;;332    		setLeds(i,31,0,255,0); // setLeds(led#, brightness, blue, green, red)
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  b2a0              UXTH     r0,r4
00000c  23ff              MOVS     r3,#0xff
00000e  2200              MOVS     r2,#0
000010  211f              MOVS     r1,#0x1f
000012  f7fffffe          BL       setLeds
;;;333    		setLeds(i+1,31,0,255,0);
000016  2000              MOVS     r0,#0
000018  1c61              ADDS     r1,r4,#1
00001a  9000              STR      r0,[sp,#0]
00001c  b288              UXTH     r0,r1
00001e  23ff              MOVS     r3,#0xff
000020  2200              MOVS     r2,#0
000022  211f              MOVS     r1,#0x1f
000024  f7fffffe          BL       setLeds
;;;334    		setLeds(i+2,31,0,255,0);
000028  2000              MOVS     r0,#0
00002a  1ca1              ADDS     r1,r4,#2
00002c  9000              STR      r0,[sp,#0]
00002e  b288              UXTH     r0,r1
000030  23ff              MOVS     r3,#0xff
000032  2200              MOVS     r2,#0
000034  211f              MOVS     r1,#0x1f
000036  f7fffffe          BL       setLeds
;;;335    		setLeds(i+3,31,0,255,0);
00003a  2000              MOVS     r0,#0
00003c  1ce1              ADDS     r1,r4,#3
00003e  9000              STR      r0,[sp,#0]
000040  b288              UXTH     r0,r1
000042  23ff              MOVS     r3,#0xff
000044  2200              MOVS     r2,#0
000046  211f              MOVS     r1,#0x1f
000048  f7fffffe          BL       setLeds
;;;336    		
;;;337    		setLeds(255-i,20,255,0,0);
00004c  2000              MOVS     r0,#0
00004e  f1c401ff          RSB      r1,r4,#0xff
000052  9000              STR      r0,[sp,#0]
000054  b288              UXTH     r0,r1
000056  2300              MOVS     r3,#0
000058  22ff              MOVS     r2,#0xff
00005a  2114              MOVS     r1,#0x14
00005c  f7fffffe          BL       setLeds
;;;338    		setLeds(255-i-1,20,255,0,0);
000060  2000              MOVS     r0,#0
000062  f1c401fe          RSB      r1,r4,#0xfe
000066  9000              STR      r0,[sp,#0]
000068  b288              UXTH     r0,r1
00006a  2300              MOVS     r3,#0
00006c  22ff              MOVS     r2,#0xff
00006e  2114              MOVS     r1,#0x14
000070  f7fffffe          BL       setLeds
;;;339    		setLeds(255-i-2,20,255,0,0);
000074  2000              MOVS     r0,#0
000076  f1c401fd          RSB      r1,r4,#0xfd
00007a  9000              STR      r0,[sp,#0]
00007c  b288              UXTH     r0,r1
00007e  2300              MOVS     r3,#0
000080  22ff              MOVS     r2,#0xff
000082  2114              MOVS     r1,#0x14
000084  f7fffffe          BL       setLeds
;;;340    		setLeds(255-i-3,20,255,0,0);
000088  2000              MOVS     r0,#0
00008a  f1c401fc          RSB      r1,r4,#0xfc
00008e  9000              STR      r0,[sp,#0]
000090  b288              UXTH     r0,r1
000092  2300              MOVS     r3,#0
000094  22ff              MOVS     r2,#0xff
000096  2114              MOVS     r1,#0x14
000098  f7fffffe          BL       setLeds
;;;341    		showleds();
00009c  f7fffffe          BL       showleds
;;;342    		delay(100000);
0000a0  4804              LDR      r0,|L14.180|
0000a2  f7fffffe          BL       delay
;;;343    		clearDisk();
0000a6  f7fffffe          BL       clearDisk
0000aa  1c64              ADDS     r4,r4,#1              ;329
                  |L14.172|
0000ac  2cfd              CMP      r4,#0xfd              ;329
0000ae  dbaa              BLT      |L14.6|
;;;344    		
;;;345    	}
;;;346    	
;;;347    	
;;;348    }
0000b0  bd18              POP      {r3,r4,pc}
;;;349    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L14.180|
                          DCD      0x000186a0

                          AREA ||i.stopLight||, CODE, READONLY, ALIGN=1

                  stopLight PROC
;;;1022   
;;;1023   void stopLight(int bass, int mid, int high)
000000  e92d41f8          PUSH     {r3-r8,lr}
;;;1024   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
;;;1025   	int n=31;
00000a  241f              MOVS     r4,#0x1f
;;;1026   	while(n>26)
00000c  e05b              B        |L15.198|
                  |L15.14|
;;;1027   	{
;;;1028   	if (bass !=0)
00000e  b176              CBZ      r6,|L15.46|
;;;1029   	{
;;;1030   
;;;1031   		for(uint16_t i=216;i<256;i++)
000010  25d8              MOVS     r5,#0xd8
000012  e009              B        |L15.40|
                  |L15.20|
;;;1032   		{
;;;1033   		setLeds(i,n,0,255,0);
000014  2000              MOVS     r0,#0
000016  b2e1              UXTB     r1,r4
000018  23ff              MOVS     r3,#0xff
00001a  4602              MOV      r2,r0
00001c  9000              STR      r0,[sp,#0]
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       setLeds
000024  1c68              ADDS     r0,r5,#1              ;1031
000026  b285              UXTH     r5,r0                 ;1031
                  |L15.40|
000028  2dff              CMP      r5,#0xff              ;1031
00002a  ddf3              BLE      |L15.20|
00002c  e00d              B        |L15.74|
                  |L15.46|
;;;1034   			
;;;1035   		}
;;;1036   	}
;;;1037   	else
;;;1038   	{
;;;1039   		for(uint16_t i=216;i<256;i++)
00002e  25d8              MOVS     r5,#0xd8
000030  e009              B        |L15.70|
                  |L15.50|
;;;1040   		{
;;;1041   			setLeds(i,31,0,0,0);
000032  2000              MOVS     r0,#0
000034  4603              MOV      r3,r0
000036  4602              MOV      r2,r0
000038  211f              MOVS     r1,#0x1f
00003a  9000              STR      r0,[sp,#0]
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       setLeds
000042  1c68              ADDS     r0,r5,#1              ;1039
000044  b285              UXTH     r5,r0                 ;1039
                  |L15.70|
000046  2dff              CMP      r5,#0xff              ;1039
000048  ddf3              BLE      |L15.50|
                  |L15.74|
;;;1042   		}
;;;1043   	
;;;1044   	}
;;;1045   	
;;;1046   		
;;;1047   	//light middle 3 yellow if med freq > ?
;;;1048   	if(mid ==1)
00004a  2f01              CMP      r7,#1
00004c  d10d              BNE      |L15.106|
;;;1049   	{
;;;1050   		for(int i =132;i<216;i++)
00004e  2584              MOVS     r5,#0x84
000050  e008              B        |L15.100|
                  |L15.82|
;;;1051   		{
;;;1052   			setLeds(i,n,0,255,255);
000052  20ff              MOVS     r0,#0xff
000054  b2e1              UXTB     r1,r4
000056  9000              STR      r0,[sp,#0]
000058  b2a8              UXTH     r0,r5
00005a  23ff              MOVS     r3,#0xff
00005c  2200              MOVS     r2,#0
00005e  f7fffffe          BL       setLeds
000062  1c6d              ADDS     r5,r5,#1              ;1050
                  |L15.100|
000064  2dd8              CMP      r5,#0xd8              ;1050
000066  dbf4              BLT      |L15.82|
000068  e00c              B        |L15.132|
                  |L15.106|
;;;1053   		}
;;;1054   		
;;;1055   	}
;;;1056   	else{
;;;1057   		
;;;1058   		for(int i =132;i<216;i++)
00006a  2584              MOVS     r5,#0x84
00006c  e008              B        |L15.128|
                  |L15.110|
;;;1059   		{
;;;1060   			setLeds(i,31,0,0,0);
00006e  2000              MOVS     r0,#0
000070  9000              STR      r0,[sp,#0]
000072  b2a8              UXTH     r0,r5
000074  2300              MOVS     r3,#0
000076  461a              MOV      r2,r3
000078  211f              MOVS     r1,#0x1f
00007a  f7fffffe          BL       setLeds
00007e  1c6d              ADDS     r5,r5,#1              ;1058
                  |L15.128|
000080  2dd8              CMP      r5,#0xd8              ;1058
000082  dbf4              BLT      |L15.110|
                  |L15.132|
;;;1061   		}
;;;1062   	}
;;;1063   	if(high == 1)
000084  f1b80f01          CMP      r8,#1
000088  d10d              BNE      |L15.166|
;;;1064   	{
;;;1065   		for(int i =0;i<132;i++)
00008a  2500              MOVS     r5,#0
00008c  e008              B        |L15.160|
                  |L15.142|
;;;1066   		{
;;;1067   			setLeds(i,n,0,0,255);
00008e  20ff              MOVS     r0,#0xff
000090  b2e1              UXTB     r1,r4
000092  9000              STR      r0,[sp,#0]
000094  b2a8              UXTH     r0,r5
000096  2300              MOVS     r3,#0
000098  461a              MOV      r2,r3
00009a  f7fffffe          BL       setLeds
00009e  1c6d              ADDS     r5,r5,#1              ;1065
                  |L15.160|
0000a0  2d84              CMP      r5,#0x84              ;1065
0000a2  dbf4              BLT      |L15.142|
0000a4  e00c              B        |L15.192|
                  |L15.166|
;;;1068   		}
;;;1069   		
;;;1070   	}
;;;1071   	else{
;;;1072   		
;;;1073   		for(int i =0;i<132;i++)
0000a6  2500              MOVS     r5,#0
0000a8  e008              B        |L15.188|
                  |L15.170|
;;;1074   		{
;;;1075   			setLeds(i,31,0,0,0);
0000aa  2000              MOVS     r0,#0
0000ac  9000              STR      r0,[sp,#0]
0000ae  b2a8              UXTH     r0,r5
0000b0  2300              MOVS     r3,#0
0000b2  461a              MOV      r2,r3
0000b4  211f              MOVS     r1,#0x1f
0000b6  f7fffffe          BL       setLeds
0000ba  1c6d              ADDS     r5,r5,#1              ;1073
                  |L15.188|
0000bc  2d84              CMP      r5,#0x84              ;1073
0000be  dbf4              BLT      |L15.170|
                  |L15.192|
;;;1076   		}
;;;1077   	}
;;;1078   	
;;;1079   	
;;;1080   	showleds();
0000c0  f7fffffe          BL       showleds
;;;1081   	n--;
0000c4  1e64              SUBS     r4,r4,#1
                  |L15.198|
0000c6  2c1a              CMP      r4,#0x1a              ;1026
0000c8  dca1              BGT      |L15.14|
;;;1082   }
;;;1083   	//delay(100000);
;;;1084   }
0000ca  e8bd81f8          POP      {r3-r8,pc}
;;;1085   arm_rfft_fast_instance_f32 MyFFT;
                          ENDP


                          AREA ||i.threshCompare||, CODE, READONLY, ALIGN=2

                  threshCompare PROC
;;;964    
;;;965    void threshCompare(float maxAmpL, float maxAmpM, float maxAmpH)
000000  4829              LDR      r0,|L16.168|
;;;966    {
;;;967    		if (maxAmpL > oldValL + 400)
000002  edd01a00          VLDR     s3,[r0,#0]
000006  ed9f2a29          VLDR     s4,|L16.172|
00000a  ee711a82          VADD.F32 s3,s3,s4
00000e  eef41ac0          VCMPE.F32 s3,s0
000012  eef1fa10          VMRS     APSR_nzcv,FPSCR
000016  d203              BCS      |L16.32|
;;;968    		{
;;;969    			bass = 2;
000018  2002              MOVS     r0,#2
00001a  4925              LDR      r1,|L16.176|
00001c  6008              STR      r0,[r1,#0]  ; bass
00001e  e012              B        |L16.70|
                  |L16.32|
;;;970    		}
;;;971    		else if (maxAmpL > oldValL + 50)
000020  4821              LDR      r0,|L16.168|
000022  edd01a00          VLDR     s3,[r0,#0]
000026  ed9f2a23          VLDR     s4,|L16.180|
00002a  ee711a82          VADD.F32 s3,s3,s4
00002e  eef41ac0          VCMPE.F32 s3,s0
000032  eef1fa10          VMRS     APSR_nzcv,FPSCR
000036  d203              BCS      |L16.64|
;;;972    		{
;;;973    			bass = 1;
000038  2001              MOVS     r0,#1
00003a  491d              LDR      r1,|L16.176|
00003c  6008              STR      r0,[r1,#0]  ; bass
00003e  e002              B        |L16.70|
                  |L16.64|
;;;974    		}
;;;975    		/*else if (maxAmpL > oldValL + 120)
;;;976    		{
;;;977    			bass = 6;
;;;978    		}
;;;979    		else if(maxAmpL > oldValL + 100)
;;;980    		{
;;;981    			bass = 5;
;;;982    		}
;;;983    		else if(maxAmpL > oldValL + 80)
;;;984    		{
;;;985    			bass = 4;
;;;986    		}
;;;987    		else if(maxAmpL > oldValL + 60)
;;;988    		{
;;;989    			bass = 3;
;;;990    		}
;;;991    		else if(maxAmpL > oldValL + 40)
;;;992    		{
;;;993    			bass = 2;
;;;994    		}
;;;995    		else if(maxAmpL > oldValL + 20)
;;;996    		{
;;;997    			bass = 1;
;;;998    		}*/
;;;999    		else {
;;;1000   			bass =0;
000040  2000              MOVS     r0,#0
000042  491b              LDR      r1,|L16.176|
000044  6008              STR      r0,[r1,#0]  ; bass
                  |L16.70|
;;;1001   		}
;;;1002   		oldValL = maxAmpL;
000046  4818              LDR      r0,|L16.168|
000048  ed800a00          VSTR     s0,[r0,#0]
;;;1003   		
;;;1004   		if(maxAmpM > oldValM +15)
00004c  481a              LDR      r0,|L16.184|
00004e  edd01a00          VLDR     s3,[r0,#0]
000052  eeb22a0e          VMOV.F32 s4,#15.00000000
000056  ee711a82          VADD.F32 s3,s3,s4
00005a  eef41ae0          VCMPE.F32 s3,s1
00005e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000062  d203              BCS      |L16.108|
;;;1005   		{
;;;1006   			mid = 1;
000064  2001              MOVS     r0,#1
000066  4915              LDR      r1,|L16.188|
000068  6008              STR      r0,[r1,#0]  ; mid
00006a  e002              B        |L16.114|
                  |L16.108|
;;;1007   		}
;;;1008   		else {
;;;1009   			mid =0;
00006c  2000              MOVS     r0,#0
00006e  4913              LDR      r1,|L16.188|
000070  6008              STR      r0,[r1,#0]  ; mid
                  |L16.114|
;;;1010   		}
;;;1011   		oldValM = maxAmpM;
000072  4811              LDR      r0,|L16.184|
000074  edc00a00          VSTR     s1,[r0,#0]
;;;1012   		
;;;1013   		if(maxAmpH > oldValH + 15) // 500 needs to be adjusted to be variable
000078  4811              LDR      r0,|L16.192|
00007a  edd01a00          VLDR     s3,[r0,#0]
00007e  eeb22a0e          VMOV.F32 s4,#15.00000000
000082  ee711a82          VADD.F32 s3,s3,s4
000086  eef41ac1          VCMPE.F32 s3,s2
00008a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00008e  d203              BCS      |L16.152|
;;;1014   		{
;;;1015   			high = 1;
000090  2001              MOVS     r0,#1
000092  490c              LDR      r1,|L16.196|
000094  6008              STR      r0,[r1,#0]  ; high
000096  e002              B        |L16.158|
                  |L16.152|
;;;1016   		}
;;;1017   		else {
;;;1018   			high =0;
000098  2000              MOVS     r0,#0
00009a  490a              LDR      r1,|L16.196|
00009c  6008              STR      r0,[r1,#0]  ; high
                  |L16.158|
;;;1019   		}
;;;1020   		oldValH = maxAmpH;
00009e  4808              LDR      r0,|L16.192|
0000a0  ed801a00          VSTR     s2,[r0,#0]
;;;1021   }
0000a4  4770              BX       lr
;;;1022   
                          ENDP

0000a6  0000              DCW      0x0000
                  |L16.168|
                          DCD      oldValL
                  |L16.172|
0000ac  43c80000          DCFS     0x43c80000 ; 400
                  |L16.176|
                          DCD      bass
                  |L16.180|
0000b4  42480000          DCFS     0x42480000 ; 50
                  |L16.184|
                          DCD      oldValM
                  |L16.188|
                          DCD      mid
                  |L16.192|
                          DCD      oldValH
                  |L16.196|
                          DCD      high

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  RightBuffer1
                          %        1024
                  RightBuffer2
                          %        1024
                  LeftBuffer1
                          %        1024
                  LeftBuffer2
                          %        1024
                  Array
                          %        4400
                  MyFFT
                          %        24
                  FFT_RawDataOut
                          %        1024
                  FFT_PowerSpectrum
                          %        1024

                          AREA ||.data||, DATA, ALIGN=2

                  crossLeds
                          DCD      0x00000001
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x0000000c
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000018
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000024
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000030
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x0000003b
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000046
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000051
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x0000005c
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000066
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000070
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x0000007a
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000084
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x0000008c
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000094
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x0000009c
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000a4
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000ab
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000b2
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000b9
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000c0
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000c6
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000cc
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000d2
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000d8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000dd
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000e2
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000e7
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000ec
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000ef
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000f2
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000f5
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000f8
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000fb
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000000ff
                  ||pC||
                          DCD      0x00000001
                  s
                          DCD      0x00000000
                  l
                          DCD      0x00000000
                  BackgroundRightBuffer
                          DCD      0x00000000
                  RightBuffer
                          DCD      0x00000000
                  BackgroundLeftBuffer
                          DCD      0x00000000
                  LeftBuffer
                          DCD      0x00000000
                  BackgroundBufferIdx
                          DCD      0x00000000
                  NextSampleOut
                          DCD      0x00000000
                  BuffersCaptured
                          DCD      0x00000000
                  NextBufferReady
                          DCD      0x00000000
                  Q
                          DCD      0x00000014
                  U
                          DCD      0x00000000
                  i
000434  00000000          DCB      0x00,0x00,0x00,0x00
                  ledArray
                          DCD      0x00000000
                  b
                          DCD      0x00000000
                  g
                          DCD      0x000000ff
                  x
                          DCD      0x00000000
                  z
                          DCD      0x00000000
                  powerSumL
                          DCD      0x00000000
                  powerSumM
                          DCD      0x00000000
                  powerSumH
                          DCD      0x00000000
                  powerAvgL
000458  443b8000          DCFS     0x443b8000 ; 750
                  powerAvgM
00045c  443b8000          DCFS     0x443b8000 ; 750
                  powerAvgH
000460  443b8000          DCFS     0x443b8000 ; 750
                  oldValL
000464  00000000          DCFS     0x00000000 ; 0
                  oldValM
                          DCD      0x00000000
                  oldValH
                          DCD      0x00000000
                  sumIt
                          DCD      0x00000001
                  bass
                          DCD      0x00000000
                  mid
                          DCD      0x00000000
                  high
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "SRC\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_74eb8635____REV16|
#line 388 ".\\SRC\\System\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_74eb8635____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_74eb8635____REVSH|
#line 402
|__asm___6_main_c_74eb8635____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_74eb8635____RRX|
#line 587
|__asm___6_main_c_74eb8635____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
